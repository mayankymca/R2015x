var params = proc.declareParameters(["setname", "rootids", "type", "name", "revision", "vault", "select", "selectpath"],
	["label", "labelSR", "where", "setname2", "dump", "notsubstitute"]);

// test to prevent injection in setname
if (!(/^[\w\+-:]+$/.test(setname)))
{
	proc.write(label, null, "Invalid set name");
	proc.write(labelSR, null, "Invalid set name");
}
// test to prevent injection in where
else if (where && !params.isWhereClauseValid(where))
{
	proc.write(label, null, "Invalid where clause");
}
else if (where && !setname2)
{
	proc.write(label, null, "Where clause provided, but not setname2");
}
else
{
	mql.startTransaction(true);
	mql.execute(null, "mod set $1 add bus $2", [setname, JSON.parse(rootids).join()]);
	
	var fullwhere = "(member[" + setname + "] == TRUE)";
	if (where)
		fullwhere += " AND (" + where + ")";
	var cmd = "temp query bus $1 $2 $3 where $4 vault $5";
	params.addVars([type, name, revision, fullwhere, vault]);
	
	if (setname2)
		cmd += " into set" + params.addVar(setname2);
	
	cmd += " select";
	if (dump || params.getBoolean("notsubstitute"))
		cmd += " notsubstitute";

	cmd += params.addVars(JSON.parse(select));

	if (dump)
		cmd += " dump" + params.addVar(dump)

	cmd += " tcl";
	
	mql.execute(label, cmd, params);
	
	
	// SR query
	params.clear();
	cmd = "query path type $1 where $2 vault $3";
	var pathwhere;
	if (setname2)
		pathwhere = "ownermember[" + setname2 + "] == TRUE";
	else
		pathwhere = "ownermember[" + setname + "] == TRUE";
	
	params.addVars(["SemanticRelation", pathwhere, vault]);
	
	cmd += " select";
	if (dump || params.getBoolean("notsubstitute"))
		cmd += " notsubstitute";

	cmd += params.addVars(JSON.parse(selectpath));

	if (dump)
		cmd += " dump" + params.addVar(dump);

	cmd += " tcl";
	
	mql.execute(labelSR, cmd, params);
	mql.abortTransaction();
}

