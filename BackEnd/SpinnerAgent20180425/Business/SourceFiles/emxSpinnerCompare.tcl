#########################################################################
#
# @progdoc      emxSpinnerCompare.tcl vM2013 (Build 7.3.1)
#
# @Description: Simple utility to compare schema metadata using spinner files.
#
# @Parameters:  See User-Defined Variables below
#
# @Usage:       Run this program for an MQL command window w/data files in directories set
#               in the User Defined Path sections.
#
# @progdoc      Copyright (c) ENOVIA Inc., October 7, 2003
#
#########################################################################
#
# @Modifications: Matt Osterman 03/01/2007 - vM10.63 Bug Fixes and Enhancements
#
#########################################################################
tcl;

eval {
   if {[info host] == "mostermant43" } {
      source "c:/Program Files/TclPro1.3/win32-ix86/bin/prodebug.tcl"
   	  set cmd "debugger_eval"
   	  set xxx [debugger_init]
   } else {
   	  set cmd "eval"
   }
}
$cmd {

   set rTcl [info tcl]
   set sPath1 [mql get env 1]
   set sPath2 [mql get env 2]
   set sMerge [string tolower [mql get env 3]]
   if {$sMerge == "merge"} {
      set bMerge TRUE
   } else {
      set bMerge FALSE
   }

############################################################
#                  User defined paths
############################################################

   if {$sPath1 == ""} {
      set sPath1 "C:/Temp/Spinner1"
   }
   if {$sPath2 == ""} {
      set sPath2 "C:/Temp/Spinner2"
   }

############################################################

# Procedure to pull extra quotes generated by Excel saves plus tagged dumper values
   proc pRegSubExcel {sExcel} {
     if {[string range $sExcel 0 0] == "\042" && [string range $sExcel end end] == "\042" && [string length $sExcel] > 2} {
   	     set iLast [expr [string length $sExcel] -2]
      	 set sExcel [string range $sExcel 1 $iLast]
      	 regsub -all "\042\042" $sExcel "\042" sExcel
      	 regsub -all "<NULL>" $sExcel "" sExcel
      }
      return $sExcel
   }

# Procedure to trim list ranges
   proc pTrimList {sList sDelimiter} {
      set lsList [split $sList $sDelimiter]
      set lsListPlan ""
      foreach sList $lsList {
      	 set sList [pRegSubExcel $sList]
         lappend lsListPlan [string trim $sList]
      }
      return $lsListPlan
   }

# Procedure to compare program source code
   proc pProgCheck {sProgramFile1 sProgramFile2 sProgPage} {
      global sPath1 sPath2 bOK sPathA sPathB
      regsub -all "/" $sProgramFile1 "SLASH" sProgramFile1
      if {$sProgPage == "Program"} {
         set sProgPage "SourceFiles"
      } else {
         set sProgPage "PageFiles"
      }
      if {[catch {set iSourceFile [open "$sPath1/Business/$sProgPage/$sProgramFile1" r]} sMsg] != 0} {
         puts "\nERROR: $sProgPage file `$sPath1/Business/$sProgPage/$sProgramFile1` does not exist."
         exit 1
         return
      } else {
         set sCode1 [read $iSourceFile]
         set sCodeTrim1 [string trim $sCode1]
         close $iSourceFile
      }
      regsub -all "/" $sProgramFile2 "SLASH" sProgramFile2
      if {[catch {set iSourceFile [open "$sPath2/Business/$sProgPage/$sProgramFile2" r]} sMsg] != 0} {
         puts "\nERROR: $sProgPage file `$sPath2/Business/$sProgPage/$sProgramFile2` does not exist."
         exit 1
         return
      } else {
         set sCode2 [read $iSourceFile]
         set sCodeTrim2 [string trim $sCode2]
         close $iSourceFile
      }
      if {[string first $sCode1 $sCode2] == -1 && $sCodeTrim1 != $sCodeTrim2} {
         set bOK FALSE
         catch {file copy "$sPath1/Business/$sProgPage/$sProgramFile1" "$sPathA/Business/$sProgPage/$sProgramFile1"} sMsg
         catch {file copy "$sPath2/Business/$sProgPage/$sProgramFile2" "$sPathB/Business/$sProgPage/$sProgramFile2"} sMsg
      }
   }

# Procedure to merge plan and actual lists for bOverlay switch
   proc pMergeList {lsPlan lsValue lsActual lsTrueValue sType} {
      set lsDel ""
      set lsPlanTemp ""
      set lsValueTemp ""
      foreach sPlan $lsPlan sValue $lsValue {
         if {$sType == "ATTR" && [string first "<>" $sPlan] >= 0} {
            lappend lsDel "[string range $sPlan 0 [string first "^" $sPlan]]"
         } elseif {[string first "<<" $sPlan] >= 0 && [string first ">>" $sPlan] == [expr [string length $sPlan] -2]} {
            if {$sType == "ATTR"} {
               set iRange [string first "<<" $sPlan]
               set sPrePlan [string range $sPlan 0 [expr $iRange - 1]]
               set sPlan [string range $sPlan $iRange end]
            }
            regsub "<<" $sPlan "" sPlan
            regsub ">>" $sPlan "" sPlan
            set sPlan [string trim $sPlan]
            if {$sType == "ATTR"} {set sPlan "$sPrePlan$sPlan"}
            if {[lsearch $lsActual $sPlan] >= 0} {lappend lsDel $sPlan}
         } else {
            lappend lsPlanTemp $sPlan
            lappend lsValueTemp $sValue
         }
      }
      set lsPlan ""
      set lsValue ""
      set iCtrTemp 0
      foreach sActual $lsActual sTrueValue $lsTrueValue {
         if {$lsDel != "" && [lsearch $lsDel $sActual] >= 0} {
         } else {
            set iPlace [lsearch $lsPlanTemp $sActual]
            if {$sType == "STATE" && $sTrueValue != ""} {
               set iPlaceSt [lsearch $lsValueTemp $sTrueValue]
               if {$iPlaceSt >= 0} {set iPlace $iPlaceSt}
            }
            if {$iPlace >= 0} {
               for {} {$iCtrTemp <= $iPlace} {incr iCtrTemp} {
                  lappend lsPlan [lindex $lsPlanTemp $iCtrTemp]
                  lappend lsValue [lindex $lsValueTemp $iCtrTemp]
               }
            } else {
               lappend lsPlan $sActual
               lappend lsValue $sTrueValue
            }
         }
      }
      for {} {$iCtrTemp < [llength $lsPlanTemp]} {incr iCtrTemp} {
         lappend lsPlan [lindex $lsPlanTemp $iCtrTemp]
         lappend lsValue [lindex $lsValueTemp $iCtrTemp]
      }
      return [list $lsPlan $lsValue]
   }

# Main

   set sSuffix [clock format [clock seconds] -format "%Y%m%d-%H%M"]
   set sOS [string tolower $tcl_platform(os)]
   if { [string tolower [string range $sOS 0 5]] == "window" } {
      set sPath "c:/temp/SpinCompare$sSuffix"
   } else {
      set sPath "/tmp/SpinCompare$sSuffix"
   }
   file mkdir $sPath
   if {$bMerge} {
      set sPathA "$sPath/SpinnerMergeSet_2-1"
      set sPathB "$sPath/SpinnerMergeSet_1-2"
   } else {
      set sPathA "$sPath/SpinnerDeltaSet1"
      set sPathB "$sPath/SpinnerDeltaSet2"
   }
   set sPathC "$sPath/SpinnerClash"
   file mkdir "$sPathA/Business"
   file mkdir "$sPathB/Business"
   file mkdir "$sPathA/Business/SourceFiles"
   file mkdir "$sPathB/Business/SourceFiles"
   file mkdir "$sPathA/Business/Policy"
   file mkdir "$sPathB/Business/Policy"
   file mkdir "$sPathA/Business/PageFiles"
   file mkdir "$sPathB/Business/PageFiles"
   file mkdir "$sPathA/System"
   file mkdir "$sPathB/System"
   file mkdir "$sPathC"

   set iLog [open "$sPath/SpinCompare.log" w]
   puts $iLog "Spinner Set #1: $sPath1\nSpinner Set #2: $sPath2\n"

# Business Files

   set lsFile [list Program Role Group Person Association Attribute Type Relationship Format Policy PolicyState PolicyStateSignature Table TableColumn WebForm WebFormField "Menu" Command Inquiry Channel Portal Trigger Property Expression Interface Page Vault_Local Vault_Remote Vault_Foreign Store_Captured Site Location Server]
   array set aSystem [list Vault_Local Vault Vault_Remote Vault Vault_Foreign Vault Store_Captured Store Site Site Location Location Server Server]
   set lsRegister [list Role Group Association Attribute Type Relationship "Format" Policy Table WebForm "Menu" Command Inquiry Channel Portal "Interface" "Expression" Vault_Local Vault_Remote Vault_Foreign Store_Captured Site Location Server]
   array set aMulti [list Association [list ] Attribute [list 5] Channel [list 6 7 8] Command [list 6 7 8] "Format" [list ] Group [list 3 4 5] Inquiry [list 5 6] "Menu" [list 6 7 8] Person [list 10 11] Policy [list 6 7 10 11] PolicyState [list 6 7 11] PolicyStateSignature [list 3 4 5] Portal [list 6 7 8] Program [list ] Property [list ] Relationship [list 3 7 13] Role [list 3 4 5] Rule [list 3 4 5 6 7] TableColumn [list 7 8 9] Table [list 3] Trigger [list ] Type [list 5 6] WebForm [list 3] WebFormField [list 7 8 9] "Page" [list ] "Expression" [list ] "Interface" [list ] ]
   foreach sFile $lsFile {
      set lsSchema1 ""
      set lsSchema2 ""
      set bSystem FALSE
      if {[lsearch [list Vault_Local Vault_Remote Vault_Foreign Store_Captured Site Location Server] $sFile] >= 0} {set bSystem TRUE}
      set bRegister FALSE
      if {[lsearch $lsRegister $sFile] >= 0} {set bRegister TRUE}
      set bInFile1 FALSE
      set bInFile2 FALSE
      if {[catch {
         if {$bSystem} {
            if {[file exists "$sPath1/System/$sFile\.xls"] == 1} {
               set bInFile1 TRUE
               set iFile1 [open "$sPath1/System/$sFile\.xls" r]
            }
            if {[file exists "$sPath2/System/$sFile\.xls"] == 1} {
               set bInFile2 TRUE
               set iFile2 [open "$sPath2/System/$sFile\.xls" r]
            }
         } else {
            if {[file exists "$sPath1/Business/Spinner$sFile\Data.xls"] == 1} {
               set bInFile1 TRUE
               set iFile1 [open "$sPath1/Business/Spinner$sFile\Data.xls" r]
            }
            if {[file exists "$sPath2/Business/Spinner$sFile\Data.xls"] == 1} {
               set bInFile2 TRUE
               set iFile2 [open "$sPath2/Business/Spinner$sFile\Data.xls" r]
            }
         }
      } sMsg] != 0} {
      	 set sMessage "Warning: Error opening files for '$sFile' so not processed."
         puts $sMessage
         puts $iLog $sMessage
         continue
      }
      if {!$bInFile1 && !$bInFile2} {
      	 set sMessage "Warning: Files for '$sFile' not found in schema sets 1 and 2 so not processed."
         puts $sMessage
         puts $iLog $sMessage
         continue
      }
      puts "Processing $sFile..."
      if {$bSystem} {
         if {$bInFile1 && !$bInFile2} {
            catch {
               file copy "$sPath1/System/$sFile.xls" "$sPath/$sFile\_1Unique.xls"
               file copy "$sPath1/System/$sFile.xls" "$sPathA/System/$sFile\.xls"
            } sMsg
            continue
         } elseif {!$bInFile1 && $bInFile2} {
            catch {
               file copy "$sPath2/System/$sFile.xls" "$sPath/$sFile\_2Unique.xls"
               file copy "$sPath2/System/$sFile.xls" "$sPathB/System/$sFile\.xls"
            }
            continue
         }
         set oFile3 [open "$sPath/$sFile\_1Unique.xls" w]
         set oFile5 [open "$sPathA/System/$sFile\.xls" w]
         set oFile4 [open "$sPath/$sFile\_2Unique.xls" w]
         set oFile6 [open "$sPathB/System/$sFile\.xls" w]
         set oFile1 [open "$sPath/$sFile\_Match.xls" w]
         set oFile2 [open "$sPath/$sFile\_Delta.xls" w]
         set oFile7 [open "$sPathC/$sFile\.xls" w]
      } else {
         if {$bInFile1 && !$bInFile2} {
            catch {
               file copy "$sPath1/Business/Spinner$sFile\Data.xls" "$sPath/Spinner$sFile\Data_1Unique.xls"
               file copy "$sPath1/Business/Spinner$sFile\Data.xls" "$sPathA/Business/Spinner$sFile\Data.xls"
               if {$sFile == "Program"} {
                  set lsSource [glob "$sPath1/Business/SourceFiles/*"]
                  foreach sSource $lsSource {
                     set sSourceFile [file tail $sSource]
                     file copy "$sSource" "$sPathA/Business/SourceFiles/$sSourceFile"
                  }
               } elseif {$sFile == "Page"} {
                  set lsPage [glob "$sPath1/Business/PageFiles/*"]
                  foreach sPage $lsPage {
                     set sPageFile [file tail $sPage]
                     file copy "$sPage" "$sPathA/Business/PageFiles/$sPageFile"
                  }
               }
            } sMsg
            continue
         } elseif {!$bInFile1 && $bInFile2} {
            catch {
               file copy "$sPath2/Business/Spinner$sFile\Data.xls" "$sPath/Spinner$sFile\Data_2Unique.xls"
               file copy "$sPath2/Business/Spinner$sFile\Data.xls" "$sPathB/Business/Spinner$sFile\Data.xls"
               if {$sFile == "Program"} {
                  set lsSource [glob "$sPath2/Business/SourceFiles/*"]
                  foreach sSource $lsSource {
                     set sSourceFile [file tail $sSource]
                     file copy "$sSource" "$sPathB/Business/SourceFiles/$sSourceFile"
                  }
               } elseif {$sFile == "Page"} {
                  set lsPage [glob "$sPath2/Business/PageFiles/*"]
                  foreach sPage $lsPage {
                     set sPageFile [file tail $sPage]
                     file copy "$sPage" "$sPathB/Business/PageFiles/$sPageFile"
                  }
               }
            }
            continue
         }
         set oFile3 [open "$sPath/Spinner$sFile\Data_1Unique.xls" w]
         set oFile5 [open "$sPathA/Business/Spinner$sFile\Data.xls" w]
         set oFile4 [open "$sPath/Spinner$sFile\Data_2Unique.xls" w]
         set oFile6 [open "$sPathB/Business/Spinner$sFile\Data.xls" w]
         set oFile1 [open "$sPath/Spinner$sFile\Data_Match.xls" w]
         set oFile2 [open "$sPath/Spinner$sFile\Data_Delta.xls" w]
         set oFile7 [open "$sPathC/$sFile\.xls" w]
      }
      set bFile1 FALSE
      set bFile2 FALSE
      set bFile3 FALSE
      set bFile4 FALSE
      set bFile5 FALSE
      set bFile6 FALSE
      set bFile7 FALSE

      if {$bInFile1} {
         set lsData1 [split [string trim [read $iFile1]] \n]
         set sHeader1 [string trim [lindex $lsData1 0]]
      } else {
         set lsData1 [list ]
         set sHeader1 ""
      }
      if {$bInFile2} {
         set lsData2 [split [string trim [read $iFile2]] \n]
         set sHeader2 [string trim [lindex $lsData2 0]]
      } else {
         set lsData2 [list ]
         set sHeader2 ""
      }
      if {$rTcl > 8.29} {
         set lsData1 [lsort -unique -dictionary $lsData1]
         set lsData2 [lsort -unique -dictionary $lsData2]
      } else {
         set lsData1 [lsort -dictionary $lsData1]
         set lsData2 [lsort -dictionary $lsData2]
      }
      set iLength1 [llength $lsData1]
      set iLength2 [llength $lsData2]
      puts $oFile1 $sHeader1
      puts $oFile2 "No.\t$sHeader1"
      puts $oFile3 $sHeader1
      puts $oFile4 $sHeader2
      puts $oFile5 $sHeader1
      puts $oFile6 $sHeader2
      puts $oFile7 "No.\t$sHeader1"

      if {$bInFile1} {
         for {set iIndexData1 0} {$iIndexData1 < $iLength1} {incr iIndexData1} {
            set slsData1 [string trim [lindex $lsData1 $iIndexData1]]
            if {[lindex [split $slsData1 \t] 0] != ""} {break}
         }
      } else {
         set slsData1 ""
      }
      if {$bInFile2} {
         for {set iIndexData2 0} {$iIndexData2 < $iLength2} {incr iIndexData2} {
            set slsData2 [string trim [lindex $lsData2 $iIndexData2]]
            if {[lindex [split $slsData2 \t] 0] != ""} {break}
         }
      } else {
         set slsData2 ""
      }

      while {$slsData1 != "" || $slsData2 != ""} {
      	 set bMerge1 FALSE
      	 set bMerge2 FALSE
         set lslsData1 [pTrimList $slsData1 "\t"]
         set sCol11 [lindex $lslsData1 0]
         set sCol12 [lindex $lslsData1 1]
         set sCol13 [lindex $lslsData1 2]
         set sCol14 [lindex $lslsData1 3]
         set sCol15 [lindex $lslsData1 4]
         set sCol16 [lindex $lslsData1 5]
         set lslsData2 [pTrimList $slsData2 "\t"]
         set sCol21 [lindex $lslsData2 0]
         set sCol22 [lindex $lslsData2 1]
         set sCol23 [lindex $lslsData2 2]
         set sCol24 [lindex $lslsData2 3]
         set sCol25 [lindex $lslsData2 4]
         set sCol26 [lindex $lslsData2 5]

         set bSame FALSE
         if {$sCol11 != "" && $sCol21 != ""} {
            switch $sFile {
               PolicyState - TableColumn - WebFormField {
                  if {$sCol11 == $sCol21 && $sCol12 == $sCol22} {
                     set bSame TRUE
                  }
               } PolicyStateSignature {
                  if {$sCol11 == $sCol21 && $sCol12 == $sCol22 && $sCol13 == $sCol23} {
                     set bSame TRUE
                  }
               } Trigger {
                  if {$sCol11 == $sCol21 && $sCol12 == $sCol22 && $sCol13 == $sCol23 && $sCol14 == $sCol24 && $sCol15 == $sCol25} {
                     set bSame TRUE
                  }
               } Property {
                  if {$sCol11 == $sCol21 && $sCol12 == $sCol22 && $sCol13 == $sCol23 && $sCol15 == $sCol25 && $sCol16 == $sCol26} {
                     set bSame TRUE
                  }
               } default {
                  if {$sCol11 == $sCol21} {
                     set bSame TRUE
                  }
               }
            }
         }

         if {$bSame} {
            if {[join $lslsData1 |] == [join $lslsData2 |] && $slsData1 != $sHeader1 && $slsData2 != $sHeader2} {
               set bOK TRUE
               if {$sFile == "Program" || $sFile == "Page"} {
               	  pProgCheck $sCol11 $sCol21 $sFile
               	  if {$bOK != "TRUE"} {
                     puts $oFile2 "1\t$slsData1\t\t# SOURCE CODE DELTA"
                     puts $oFile2 "2\t$slsData2\t\t# SOURCE CODE DELTA"
                     puts $oFile5 $slsData1
                     puts $oFile6 $slsData2
                     set bFile2 TRUE
                     set bFile5 TRUE
                     set bFile6 TRUE
                  }
               }

               if {$bOK} {
                  puts $oFile1 $slsData1
                  set bFile1 TRUE
               }
            } elseif {$slsData1 != $sHeader1 && $slsData2 != $sHeader2} {
               set bOK TRUE
               set iCount 0
               set bProcessMerge FALSE
               set slsData3 ""
               set slsData4 ""
               foreach sData1 $lslsData1 sData2 $lslsData2 {
               	  if {$sData1 == $sData2} {
               	     incr iCount
               	     continue
               	  } elseif {$iCount == 5 && ($sFile == "TableColumn" || $sFile == "WebFormField")} {
               	     if {($sData1 == "" && $sData2 == "dummy") || ($sData1 == "dummy" && $sData2 == "")} {
               	     	incr iCount
               	     	continue
               	     }
               	  } elseif {[string tolower $sData1] == "true" || [string tolower $sData1] == "false"} {
               	     if {[string tolower $sData1] == [string tolower $sData2]} {
               	     	incr iCount
               	     	continue
               	     }
               	  } elseif {[string first "|" $sData1] >= 0 || ($bMerge && $bSystem != "TRUE" && [lsearch $aMulti($sFile) $iCount] >= 0)} {
               	     set lslslsData1 [pTrimList $sData1 |]
               	     set slslsData1 [join [lsort $lslslsData1] |]
               	     set lslslsData2 [pTrimList $sData2 |]
               	     set slslsData2 [join [lsort $lslslsData2] |]
               	     if {$slslsData1 == $slslsData2} {
               	     	incr iCount
               	     	continue
               	     } elseif {$bMerge} {
# Merge List Items
                        set bValue FALSE
                        switch $sFile {
                           Channel - Command - "Menu" - Portal {
                              if {$iCount == 6} {
                                 set bValue TRUE
                              } elseif {$iCount == 7} {
                              	 incr iCount
                              	 continue
                              }
               	           } TableColumn - WebFormField {
               	              if {$iCount == 7} {
               	                 set bValue TRUE
               	              } elseif {$iCount == 8} {
               	              	 incr iCount
               	             	 continue
               	              }
               	           } Policy {
               	              if {$iCount == 10} {
               	              	 set bValue TRUE
               	              } elseif {$iCount == 11} {
               	              	 incr iCount
               	             	 continue
               	              }
               	           } Inquiry {
               	              if {$iCount == 5} {
               	                 set bValue TRUE
               	              } elseif {$iCount == 6} {
               	             	 incr iCount
               	             	 continue
               	              }
               	           } default {
               	           }
               	        }
               	        if {$bValue} {
               	           set lslslsData1v [pTrimList [lindex $lslsData1 [expr $iCount + 1]] "|"]
               	           set lslslsData2v [pTrimList [lindex $lslsData2 [expr $iCount + 1]] "|"]
               	           set lsResult [pMergeList $lslslsData1 $lslslsData1v $lslslsData2 $lslslsData2v ""]
               	           if {$lsResult != $lslslsData1} {
               	              set bMerge1 TRUE
               	              set bOK FALSE
               	           }
               	           set sResult1 [join [lindex $lsResult 0] |]
               	           set sResult1v [join [lindex $lsResult 1] |]
               	           set lsResult [pMergeList $lslslsData2 $lslslsData2v $lslslsData1 $lslslsData1v ""]
               	           if {$lsResult != $lslslsData2} {
               	              set bMerge2 TRUE
               	              set bOK FALSE
               	           }
               	           set sResult2 [join [lindex $lsResult 0] |]
               	           set sResult2v [join [lindex $lsResult 1] |]
               	           set lsTemp1 ""
               	           set lsTemp2 ""
               	           for {set i 0} {$i < $iCount} {incr i} {
               	              lappend lsTemp1 [lindex $lslsData1 $i]
               	              lappend lsTemp2 [lindex $lslsData2 $i]
               	           }
               	           lappend lsTemp1 $sResult1 $sResult1v
               	           lappend lsTemp2 $sResult2 $sResult2v
               	           for {set i [expr $iCount + 2]} {$i < [llength $lslsData1]} {incr i} {
               	              lappend lsTemp1 [lindex $lslsData1 $i]
               	              lappend lsTemp2 [lindex $lslsData2 $i]
               	           }
               	           set slsData3 [join $lsTemp1 \t]
               	           set slsData4 [join $lsTemp2 \t]
               	           incr iCount
               	           continue
               	        } else {
                           set lsResult [pMergeList $lslslsData1 "" $lslslsData2 "" ""]
               	           if {$lsResult != $lslslsData1} {
               	              set bMerge1 TRUE
               	              set bOK FALSE
               	           }
               	           set sResult1 [join [lindex $lsResult 0] |]
               	           set lsResult [pMergeList $lslslsData2 "" $lslslsData1 "" ""]
               	           if {$lsResult != $lslslsData2} {
               	              set bMerge2 TRUE
               	              set bOK FALSE
               	           }
               	           set sResult2 [join [lindex $lsResult 0] |]
               	           set lsTemp1 ""
               	           set lsTemp2 ""
               	           for {set i 0} {$i < $iCount} {incr i} {
               	              lappend lsTemp1 [lindex $lslsData1 $i]
               	              lappend lsTemp2 [lindex $lslsData2 $i]
               	           }
               	           lappend lsTemp1 $sResult1
               	           lappend lsTemp2 $sResult2
               	           for {set i [expr $iCount + 1]} {$i < [llength $lslsData1]} {incr i} {
               	              lappend lsTemp1 [lindex $lslsData1 $i]
               	              lappend lsTemp2 [lindex $lslsData2 $i]
               	           }
               	           set slsData3 [join $lsTemp1 \t]
               	           set slsData4 [join $lsTemp2 \t]
               	           incr iCount
               	           continue
               	        }
               	     }
               	  }
               	  set bOK FALSE
               	  if {$bMerge} {
               	     incr iCount
               	     continue
                  } else {
               	     break
                  }
               }
               if {$bOK} {
                  if {$sFile == "Program" || $sFile == "Page"} {
                     pProgCheck $sCol11 $sCol21 $sFile
                     if {$bOK != "TRUE"} {
                        puts $oFile2 "1\t$slsData1\t\t# SOURCE CODE DELTA"
                        puts $oFile2 "2\t$slsData2\t\t# SOURCE CODE DELTA"
                        puts $oFile5 $slsData1
                        puts $oFile6 $slsData2
                        set bFile2 TRUE
                        set bFile5 TRUE
                        set bFile6 TRUE
                     }
                  }
                  if {$bOK} {
                     puts $oFile1 $slsData1
                     set bFile1 TRUE
                  }
               } else {
                  puts $oFile2 "1\t$slsData1"
                  puts $oFile2 "2\t$slsData2"
                  set bFile2 TRUE
# Check for registration clash
                  set bClash FALSE
                  if {$bRegister} {
                     if {$sCol12 != $sCol22} {
                        if {$sFile == "WebForm"} {
                	   set sSymName "form"
                	} elseif {$bSystem} {
                	   set sSymName [string tolower $aSystem($sFile)]
                	} else {
                	   set sSymName [string tolower $sFile]
                	}
                	if {$sCol12 == ""} {
                	   set sSymName1 "\133BLANK\135"
                	} else {
                	   set sSymName1 "$sSymName\_$sCol12"
                	   regsub -all " " $sSymName1 "" sSymName1
                	}
                	if {$sCol22 == ""} {
                	   set sSymName2 "\133BLANK\135"
                	} else {
                	   set sSymName2 "$sSymName\_$sCol22"
                	   regsub -all " " $sSymName2 "" sSymName2
                	}
                	set sMessage "WARNING: The same '$sFile' name '$sCol11' use different registrations:\n   Schema 1 '$sFile' Symbolic Name: '$sSymName1'\n   Schema 2 '$sFile' Symbolic Name: '$sSymName2'"
                        puts $sMessage
                        puts $iLog $sMessage
                        puts $oFile7 "1\t$slsData1"
                        puts $oFile7 "2\t$slsData2"
                        set bFile7 TRUE
                        set bClash TRUE
                     }
                  }
                  if {$bMerge != "TRUE"} {
                     puts $oFile5 $slsData1
                     puts $oFile6 $slsData2
                     set bFile5 TRUE
                     set bFile6 TRUE
                  } elseif {$bClash != "TRUE" && $slsData3 != ""} {
                     puts $oFile5 $slsData3
                     puts $oFile6 $slsData4
                  }
               }
            }
            incr iIndexData1
            incr iIndexData2
         } else {
            if {$slsData1 == $sHeader1} {
               incr iIndexData1
            } elseif {$slsData2 == $sHeader2} {
               incr iIndexData2
            } elseif {$sCol11 == ""} {
               if {$iIndexData1 < $iLength1} {
                  incr iIndexData1
               } else {
                  puts $oFile4 $slsData2
                  puts $oFile6 $slsData2
                  set bFile4 TRUE
                  set bFile6 TRUE
               	  incr iIndexData2
                  if {$sFile == "Program"} {
                     catch {file copy "$sPath2/Business/SourceFiles/$sCol21" "$sPathB/Business/SourceFiles/$sCol21"} sMsg
                  } elseif {$sFile == "Page"} {
                     catch {file copy "$sPath2/Business/PageFiles/$sCol21" "$sPathB/Business/PageFiles/$sCol21"} sMsg
                  }
               	  if {$bRegister} {
                     set aSchema2($sFile|$sCol22) [list $sCol21 $slsData2]
                     lappend lsSchema2 $sCol22
                  }
               }
            } elseif {$sCol21 == ""} {
               if {$iIndexData2 < $iLength2} {
            	  incr iIndexData2
               } else {
                  puts $oFile3 $slsData1
                  puts $oFile5 $slsData1
                  set bFile3 TRUE
                  set bFile5 TRUE
                  incr iIndexData1
                  if {$sFile == "Program"} {
                     catch {file copy "$sPath1/Business/SourceFiles/$sCol11" "$sPathA/Business/SourceFiles/$sCol11"} sMsg
                  } elseif {$sFile == "Page"} {
                     catch {file copy "$sPath1/Business/PageFiles/$sCol11" "$sPathA/Business/PageFiles/$sCol11"} sMsg
                  }
                  if {$bRegister} {
                     set aSchema1($sFile|$sCol12) [list $sCol11 $slsData1]
                     lappend lsSchema1 $sCol12
                  }
               }
            } else {
               set lsTest [lsort -dictionary [list $slsData1 $slsData2]]
               if {$slsData1 == [lindex $lsTest 0]} {
                  puts $oFile3 $slsData1
                  puts $oFile5 $slsData1
                  set bFile3 TRUE
                  set bFile5 TRUE
                  incr iIndexData1
                  if {$sFile == "Program"} {
                     catch {file copy "$sPath1/Business/SourceFiles/$sCol11" "$sPathA/Business/SourceFiles/$sCol11"} sMsg
                  } elseif {$sFile == "Page"} {
                     catch {file copy "$sPath1/Business/PageFiles/$sCol11" "$sPathA/Business/PageFiles/$sCol11"} sMsg
                  }
               	  if {$bRegister} {
                     set aSchema1($sFile|$sCol12) [list $sCol11 $slsData1]
                     lappend lsSchema1 $sCol12
                  }
               } else {
                  puts $oFile4 $slsData2
                  puts $oFile6 $slsData2
                  set bFile4 TRUE
                  set bFile6 TRUE
                  incr iIndexData2
                  if {$sFile == "Program"} {
                     catch {file copy "$sPath2/Business/SourceFiles/$sCol21" "$sPathB/Business/SourceFiles/$sCol21"} sMsg
                  } elseif {$sFile == "Page"} {
                     catch {file copy "$sPath2/Business/PageFiles/$sCol21" "$sPathB/Business/PageFiles/$sCol21"} sMsg
                  }
               	  if {$bRegister} {
                     set aSchema2($sFile|$sCol22) [list $sCol21 $slsData2]
                     lappend lsSchema2 $sCol22
                  }
               }
            }
         }
         set slsData1 [string trim [lindex $lsData1 $iIndexData1]]
         set slsData2 [string trim [lindex $lsData2 $iIndexData2]]
      }
      close $iFile1
      close $iFile2
      close $oFile1
      close $oFile2
      close $oFile3
      close $oFile4
      close $oFile5
      close $oFile6
      if {$bFile1 == "FALSE"} {
         if {$bSystem} {
            file delete "c:/temp/SpinCompare$sSuffix/$sFile\_Match.xls"
         } else {
            file delete "c:/temp/SpinCompare$sSuffix/Spinner$sFile\Data_Match.xls"
         }
      }
      if {$bFile2 == "FALSE"} {
         if {$bSystem} {
            file delete "c:/temp/SpinCompare$sSuffix/$sFile\_Delta.xls"
         } else {
            file delete "c:/temp/SpinCompare$sSuffix/Spinner$sFile\Data_Delta.xls"
         }
      }
      if {$bFile3 == "FALSE"} {
         if {$bSystem} {
            file delete "c:/temp/SpinCompare$sSuffix/$sFile\_1Unique.xls"
         } else {
            file delete "c:/temp/SpinCompare$sSuffix/Spinner$sFile\Data_1Unique.xls"
         }
      }
      if {$bFile4 == "FALSE"} {
         if {$bSystem} {
            file delete "c:/temp/SpinCompare$sSuffix/$sFile\_2Unique.xls"
         } else {
            file delete "c:/temp/SpinCompare$sSuffix/Spinner$sFile\Data_2Unique.xls"
         }
      }
      if {$lsSchema1 != "" && $lsSchema2 != ""} {
      	 foreach sSchema1 $lsSchema1 {
      	    if {[info exists aSchema2($sFile|$sSchema1)]} {
      	       if {$sFile == "WebForm"} {
      	       	  set sSymName "form"
      	       } elseif {$bSystem} {
      	       	  set sSymName [string tolower $aSystem($sFile)]
      	       } else {
      	       	  set sSymName [string tolower $sFile]
      	       }
      	       set sSymName "$sSymName\_$sSchema1"
      	       regsub -all " " $sSymName "" sSymName
               set sMessage "WARNING: Different '$sFile' names share a common registration name: '$sSymName'\n   Schema 1 '$sFile' Name: '[string trim [lindex [split [lindex [split $aSchema1($sFile|$sSchema1) \t] 0] "\173"] 0] ]'\n   Schema 2 '$sFile' Name: '[string trim [lindex [split [lindex [split $aSchema2($sFile|$sSchema1) \t] 0] "\173"] 0] ]'"
               puts $sMessage
               puts $iLog $sMessage
               puts $oFile7 "1\t[lindex $aSchema1($sFile|$sSchema1) 1]"
               puts $oFile7 "2\t[lindex $aSchema2($sFile|$sSchema1) 1]"
               set bFile7 TRUE
      	    }
      	 }
      }
      close $oFile7
      if {$bFile7 == "FALSE"} {
         file delete "c:/temp/SpinCompare$sSuffix/SpinnerClash/$sFile.xls"
      }
   }

# Policy Access Files

   set lsFileTemp [glob -nocomplain "$sPath1/Business/Policy/*.xls"]
   set lsFile1 ""
   foreach sFile $lsFileTemp {
      lappend lsFile1 [file tail $sFile]
   }
   set lsFileTemp [glob -nocomplain "$sPath2/Business/Policy/*.xls"]
   set lsFile2 ""
   foreach sFile $lsFileTemp {
      lappend lsFile2 [file tail $sFile]
   }

   foreach sFile1 $lsFile1 sFile2 $lsFile2 {
      if {$sFile1 != "" && [lsearch $lsFile2 $sFile1] < 0} {
         catch {file copy "$sPath1/Business/Policy/$sFile1" "$sPathA/Business/Policy/$sFile1"} sMsg
      } elseif {$sFile2 != "" && [lsearch $lsFile1 $sFile2] < 0} {
         catch {file copy "$sPath2/Business/Policy/$sFile2" "$sPathB/Business/Policy/$sFile2"} sMsg
      } elseif {$sFile1 != "" && [lsearch $lsFile2 $sFile1] >= 0} {
         set iFile1 [open "$sPath1/Business/Policy/$sFile1" r]
         set iFile2 [open "$sPath2/Business/Policy/$sFile1" r]
         set slsFileA [read $iFile1]
         set slsFileB [read $iFile2]
         close $iFile1
         close $iFile2
         if {$slsFileA != $slsFileB} {
            set lsFileTemp [split $slsFileA \n]
            set lsFileA ""
            foreach sFileTemp $lsFileTemp {
               set sFileTemp [pRegSubExcel $sFileTemp]
               set lsFileLineTemp [split $sFileTemp \t]
               set lsFileLineA ""
               foreach sFileLineTemp $lsFileLineTemp {
                  lappend lsFileLineA [pRegSubExcel $sFileLineTemp]
               }
               lappend lsFileA [join $lsFileLineA |]
            }
            set lsFileTemp [split $slsFileB \n]
            set lsFileB ""
            foreach sFileTemp $lsFileTemp {
               set sFileTemp [pRegSubExcel $sFileTemp]
               set lsFileLineTemp [split $sFileTemp \t]
               set lsFileLineB ""
               foreach sFileLineTemp $lsFileLineTemp {
                  lappend lsFileLineB [pRegSubExcel $sFileLineTemp]
               }
               lappend lsFileB [join $lsFileLineB |]
            }

            set bHeader TRUE
            foreach sFileA $lsFileA sFileB $lsFileB {
               if {$bHeader} {
                  set bHeader FALSE
                  continue
               }
               if {($sFileB != "" && [lsearch $lsFileA $sFileB] < 0) || ($sFileA != "" && [lsearch $lsFileB $sFileA] < 0)} {
                  catch {file copy "$sPath1/Business/Policy/$sFile1" "$sPathA/Business/Policy/$sFile1"} sMsg
                  catch {file copy "$sPath2/Business/Policy/$sFile1" "$sPathB/Business/Policy/$sFile2"} sMsg
                  break
               }
            }
         }
      }
   }
   puts "Files loaded in directory: $sPath"
   close $iLog
}

