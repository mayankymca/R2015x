import com.matrixone.apps.common.Route;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PersonUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.eMatrixDateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import matrix.db.Attribute;
import matrix.db.AttributeList;
import matrix.db.AttributeType;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.Policy;
import matrix.db.RelationshipType;
import matrix.db.StateList;
import matrix.util.StringList;

public class emxDashboardRoutesBase_mxJPO {
    public static String relRouteTask = DomainConstants.RELATIONSHIP_ROUTE_TASK;
	SimpleDateFormat sdf = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat());

    public emxDashboardRoutesBase_mxJPO(Context context, String[] args) throws Exception {}


    // Create Simple Route
    public String createRoute(Context context, String[] args) throws Exception {

        HashMap paramMap        = (HashMap) JPO.unpackArgs(args);
        String sRecipients      = (String) paramMap.get("recipients");
        String sTitle           = (String) paramMap.get("title");
        String sInstructions    = (String) paramMap.get("instructions");
        String sDueDate         = (String) paramMap.get("duedate");
        String sRequired        = (String) paramMap.get("required");
        String sAction          = (String) paramMap.get("action");
        String sIDs             = (String) paramMap.get("ids");
        String sStart           = (String) paramMap.get("start");


        StringList busSelects = new StringList();
        StringList relSelects = new StringList();

        relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);

        String sName = DomainObject.getAutoGeneratedName(context, "type_Route", "");

        Route route = new Route();
        String attrRouteCompletionAction = PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_attribute_RouteCompletionAction);

        route.createObject(context, DomainConstants.TYPE_ROUTE, sName, "1", DomainConstants.POLICY_ROUTE, context.getVault().getName());
        route.setAttributeValue(context, attrRouteCompletionAction, "Notify Route Owner");
        route.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE, "Standard");
        route.setDescription(context, sTitle);

        if(!sRecipients.equals("")) {

            sRecipients             = sRecipients.substring(0, sRecipients.length() - 1);
            String[] aRecipients    = sRecipients.split(";");
            MapList mlRecipients    = DomainObject.getInfo(context, aRecipients, new StringList(new String[]{DomainConstants.SELECT_TYPE, DomainConstants.SELECT_ID}));
            StringBuilder sbMembers = new StringBuilder();

            for(int i = 0; i < mlRecipients.size(); i++) {
                Map mRecipient = (Map)mlRecipients.get(i);
                String sType = (String)mRecipient.get(DomainConstants.SELECT_TYPE);
                String sOID = (String)mRecipient.get(DomainConstants.SELECT_ID);
                if(sType.equals(DomainConstants.TYPE_PERSON)) {
                    sbMembers.append(sOID).append(";");
                } else if (sType.equals(PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_type_MemberList))) {
                    DomainObject doList = new DomainObject(sOID);
                    MapList mlMembers = doList.getRelatedObjects(context, DomainConstants.RELATIONSHIP_LIST_MEMBER, DomainConstants.TYPE_PERSON, new StringList(new String[]{DomainConstants.SELECT_TYPE, DomainConstants.SELECT_ID}), null, false, true, (short)1, "current == 'Active'", "", 0);
                    for(int j = 0; j < mlMembers.size(); j++) {
                        Map mMember = (Map)mlMembers.get(j);
                        String sOIDMember = (String)mMember.get(DomainConstants.SELECT_ID);
                        sbMembers.append(sOIDMember).append(";");

                    }
                }

            }

            if(sbMembers.length() > 0) { sbMembers.setLength(sbMembers.length() - 1); }

            route.AddMembers(context, sbMembers.toString().split(";"));

            MapList mlRouteNodes = route.getRelatedObjects(context, DomainConstants.RELATIONSHIP_ROUTE_NODE, DomainConstants.TYPE_PERSON, busSelects, relSelects, false, true, (short)1, "", "", 0);

            for(int i = 0; i < mlRouteNodes.size(); i++) {

                Map mRouteNode          = (Map)mlRouteNodes.get(i);
                String sRID             = (String)mRouteNode.get(DomainObject.SELECT_RELATIONSHIP_ID);
                DomainRelationship dRel = new DomainRelationship(sRID);

                dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_SEQUENCE, "1");

                if(!sTitle.equals(""))          { dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, sTitle);                                         }
                if(!sInstructions.equals(""))   { dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_INSTRUCTIONS, sInstructions);                     }
                if(!sRequired.equals(""))       { dRel.setAttributeValue(context, PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_attribute_ParallelNodeProcessionRule), sRequired);              }
                if(!sAction.equals(""))         { dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_ACTION, sAction);                                 }
                if(!sDueDate.equals(""))        { dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE, sDueDate + " 5:00:00 PM");   }

            }

        }


        if(!sIDs.equals("")) {
            if(sIDs.endsWith(";")) { sIDs = sIDs.substring(0, sIDs.length()- 1); }
            String[] aIDs = sIDs.split(";");
            route.AddContent(context, aIDs);
        }

        if(sStart.equalsIgnoreCase("TRUE")) { route.promote(context); }

        return route.getObjectId();

    }


    // Routes dashboard Data Retrieval
    public String[] getRoutesDashboardData(Context context, String[] args) throws Exception {


        String[] sColors            = {"329cee","f6bd0f","8BBA00","ec0c41","752fc3","AFD8F8","fad46c","c9ff0d","F984A1","A66EDD"};
        String[] aResults           = new String[30];
        Calendar cNow               = Calendar.getInstance();
        Calendar cDate              = Calendar.getInstance();
        Calendar cRecent            = Calendar.getInstance();
        Calendar cFuture            = Calendar.getInstance();
        HashMap paramMap            = (HashMap) JPO.unpackArgs(args);
        String sOID                 = (String) paramMap.get("objectId");
        String sLanguage            = (String)paramMap.get("languageStr");
        String timeZone             =  (String)paramMap.get("timezone");

        cRecent.add(java.util.GregorianCalendar.DAY_OF_YEAR, -14);
        cFuture.add(java.util.GregorianCalendar.DAY_OF_YEAR, 5);
        int iYearNow       = cNow.get(Calendar.YEAR);
        int iMonthNow      = cNow.get(Calendar.MONTH);
        int iWeekNow       = cNow.get(Calendar.WEEK_OF_YEAR);

		String statusCompletedDate = EnoviaResourceBundle.getProperty(context,"Components","emxComponents.TaskSummary.CompletedDate",sLanguage);
		String statusDueDate = EnoviaResourceBundle.getProperty(context,"Components","emxComponents.Routes.ScheduleCompDate",sLanguage);
        String sLabelThisWeek   = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.ThisWeek" , sLanguage);
        String sLabelThisMonth  = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.ThisMonth", sLanguage);
        String sLabelOverdue    = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.Overdue"  , sLanguage);

        StringBuilder sbRoutes              = new StringBuilder();
        StringBuilder sbCategoriesPending   = new StringBuilder();
        StringBuilder sbDataPending1        = new StringBuilder();
        StringBuilder sbDataPending2        = new StringBuilder();
        StringBuilder sbDataPending3        = new StringBuilder();
        StringBuilder sbPendingWeek         = new StringBuilder();
        StringBuilder sbPendingMonth        = new StringBuilder();
        StringBuilder sbPendingOverdue      = new StringBuilder();
        StringBuilder sbCategoriesRecent    = new StringBuilder();
        StringBuilder sbDataRecent1         = new StringBuilder();
        StringBuilder sbDataRecent2         = new StringBuilder();
        StringBuilder sbDataRecent3         = new StringBuilder();
        StringBuilder sbDataRecent4         = new StringBuilder();
        StringBuilder sbCategoriesType      = new StringBuilder();
        StringBuilder sbDataType            = new StringBuilder();
        StringBuilder sbDataPurpose         = new StringBuilder();
        StringBuilder sbCategoriesTemplate  = new StringBuilder();
        StringBuilder sbDataTemplate        = new StringBuilder();

        int iMaxPending         = 0;
        int iMaxRecent          = 0;
        int[] aCountPending     = new int[3];
        int[] aCountPurpose     = new int[3];
//        for(int i = 0; i < aCountPending.length; i++) { aCountPending[i] = 0; }
        //        for(int i = 0; i < aCountPurpose.length; i++) { aCountPurpose[i] = 0; }

        java.util.List<String> lTypes       = new ArrayList<String>();
        java.util.List<String> lTemplates   = new ArrayList<String>();

        MapList mlTypes = new MapList();

        StringList busSelects = new StringList();
        String relRouteTask = DomainConstants.RELATIONSHIP_ROUTE_TASK;
        String relObjectRoute = DomainConstants.RELATIONSHIP_OBJECT_ROUTE;

        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_CURRENT);

        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_STATUS +"]");
        busSelects.add("attribute[Current Route Node]");
        busSelects.add("to["+ relRouteTask +"]");
        busSelects.add("to["+ relRouteTask +"].from.current");
        busSelects.add("to["+ relRouteTask +"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.attribute["+ DomainConstants.ATTRIBUTE_FIRST_NAME +"]");
        busSelects.add("to["+ relRouteTask +"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.attribute["+ DomainConstants.ATTRIBUTE_LAST_NAME +"]");
        busSelects.add("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE + "]");
        busSelects.add("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_ACTUAL_COMPLETION_DATE +"]");
        busSelects.add("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
        busSelects.add("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION+"]");
        busSelects.add("to["+DomainConstants.RELATIONSHIP_ROUTE_TASK+"].from.from["+DomainConstants.RELATIONSHIP_PROJECT_TASK+"].to.name");
        busSelects.add("to["+ relObjectRoute +"]");
        busSelects.add("to["+ relObjectRoute +"].from.type.kindof");
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE +"]");
        busSelects.add("from["+ DomainConstants.RELATIONSHIP_INITIATING_ROUTE_TEMPLATE +"].to.name");

        MapList mlRoutes        = retrieveRoutesPending(context, args, busSelects, "");
        MapList mlTasksPending  = new MapList();
        MapList mlTasksRecent   = new MapList();

        sbRoutes.append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.ThereAre" , sLanguage));
        sbRoutes.append(" <span style='font-weight:bold;color:#000;'>").append(mlRoutes.size()).append("</span> ");
        sbRoutes.append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.PendingRoutes" , sLanguage));

        for(int i = 0; i < mlRoutes.size(); i++) {

            Map mRoute          = (Map)mlRoutes.get(i);
            String sId          = (String)mRoute.get(DomainConstants.SELECT_ID);
            String sName        = (String)mRoute.get(DomainConstants.SELECT_NAME);
            String sHasTask     = (String)mRoute.get("to["+ relRouteTask +"]");
            String sHasObject   = (String)mRoute.get("to["+ relObjectRoute +"]");
            String sPurpose     = (String)mRoute.get("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE +"]");
            String sTemplate    = (String)mRoute.get("from["+ DomainConstants.RELATIONSHIP_INITIATING_ROUTE_TEMPLATE +"].to.name");

            if(sHasTask.equalsIgnoreCase("TRUE")) {

                String sStatus      = (String)mRoute.get("to["+ relRouteTask +"].from.current");
                String sDateTarget  = (String)mRoute.get("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE + "]");
                String sDateActual  = (String)mRoute.get("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_ACTUAL_COMPLETION_DATE +"]");
                String sTitle       = (String)mRoute.get("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
                String sAction      = (String)mRoute.get("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION +"]");
                String sFirstName   = (String)mRoute.get("to["+ relRouteTask +"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.attribute["+ DomainConstants.ATTRIBUTE_FIRST_NAME +"]");
                String sLastName    = (String)mRoute.get("to["+ relRouteTask +"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.attribute["+ DomainConstants.ATTRIBUTE_LAST_NAME +"]");
                String sFullNames 	= (String)mRoute.get("to["+ relRouteTask +"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.name");
                // have to check for the right solution for below
                if(sStatus.contains("")) {

                    sTitle = sTitle.replaceAll("", " ");
                    if(sTitle.startsWith("")) { sTitle = " " + sTitle;}
                    if(sTitle.endsWith("")) { sTitle = sTitle + " ";}

                    sDateTarget = sDateTarget.replaceAll("", " ");
                    if(sDateTarget.startsWith("")) { sDateTarget = " " + sDateTarget;}
                    if(sDateTarget.endsWith("")) { sDateTarget = sDateTarget + " ";}

                    sDateActual = sDateActual.replaceAll("", " ");
                    if(sDateActual.startsWith("")) { sDateActual = " " + sDateActual;}
                    if(sDateActual.endsWith("")) { sDateActual = sDateActual + " ";}

                    sFirstName = sFirstName.replaceAll("", " ");
                    if(sFirstName.startsWith("")) { sFirstName = " " + sFirstName;}
                    if(sFirstName.endsWith("")) { sFirstName = sFirstName + " ";}

                    sLastName = sLastName.replaceAll("", " ");
                    if(sLastName.startsWith("")) { sLastName = " " + sLastName;}
                    if(sLastName.endsWith("")) { sLastName = sLastName + " ";}

                    sFullNames = sFullNames.replaceAll("", " ");
                    if(sFullNames.startsWith("")) { sFullNames = " " + sFullNames;}
                    if(sFullNames.endsWith("")) { sFullNames = sFullNames + " ";}
                    
                    String[] aStatus        = sStatus.split("");
                    String[] aDateTarget    = sDateTarget.split("");
                    String[] aDateActual    = sDateActual.split("");
                    String[] aTitle         = sTitle.split("");
                    String[] aAction        = sAction.split("");
                    String[] aFirstName     = sFirstName.split("");
                    String[] aLastName      = sLastName.split("");
                    String[] aFullNames     = sFullNames.split("");

                    for(int k = 0; k < aStatus.length; k++) {
                        String sParamFirstName = "";
                        String sParamLastName = "";
                        if(k < aFirstName.length) { sParamFirstName = aFirstName[k]; }
                        if(k < aLastName.length) { sParamLastName = aLastName[k]; }
                        String sFullName = "";
                        try {
                           sFullName    = aFullNames[k];
                        } catch (Exception ex){
                        	//donothing
                        }
                        if(sFullName.equals(context.getUser())){
                        addPendingTaskToMap(context, mlTasksPending, sId, sName, aStatus[k], aDateTarget[k], aTitle[k], aAction[k], sParamFirstName, sParamLastName, sLanguage);
                        addRecentTaskToMap(context, mlTasksRecent, cRecent, sId, sName, aStatus[k], aDateTarget[k], aDateActual[k], aTitle[k], aAction[k], sParamFirstName, sParamLastName, sLanguage);
                    }
                    }

                } else {
                    addPendingTaskToMap(context,mlTasksPending, sId, sName, sStatus, sDateTarget, sTitle, sAction, sFirstName, sLastName,sLanguage);
                    addRecentTaskToMap(context, mlTasksRecent, cRecent, sId, sName, sStatus, sDateTarget, sDateActual, sTitle, sAction, sFirstName, sLastName, sLanguage);
                }

            }

            // Route Content Type
            if(sHasObject.equalsIgnoreCase("TRUE")) {
                if (mRoute.get("to[Object Route].from.type.kindof") instanceof StringList) {
                    StringList slData = (StringList)mRoute.get("to["+ relObjectRoute +"].from.type.kindof");
                    for(int k = 0; k < slData.size(); k++) {
                        String sData = (String)slData.get(k);
                        sData = EnoviaResourceBundle.getTypeI18NString(context, sData, sLanguage);
                        if(!lTypes.contains(sData)) {
                            lTypes.add(sData);
                            Map mType = new HashMap();
                            mType.put("name", (String)slData.get(k));
                            mType.put("label", sData);
                            mlTypes.add(mType);
                        }
                    }
                } else {
                    String sData = (String)mRoute.get("to["+ relObjectRoute +"].from.type.kindof");
                    if(sData.contains("")) {
                        String[] aData = sData.split("");
                        for(int j = 0; j < aData.length; j++) {
                            String sDataItem = EnoviaResourceBundle.getTypeI18NString(context, aData[j], sLanguage);
                            if(!lTypes.contains(sDataItem)) {
                                lTypes.add(sDataItem);
                                Map mType = new HashMap();
                                mType.put("name", aData[j]);
                                mType.put("label", sDataItem);
                                mlTypes.add(mType);
                            }
                        }
                    } else {
                        String sLabel = EnoviaResourceBundle.getTypeI18NString(context, sData, sLanguage);
                        if(!lTypes.contains(sLabel)) {
                            lTypes.add(sLabel);
                            Map mType = new HashMap();
                            mType.put("name", sData);
                            mType.put("label", sLabel);
                            mlTypes.add(mType);
                        }
                    }
                }
            }


            // Route Base Purpose counters
            if(sPurpose.equals("Approval"))      { aCountPurpose[0]++; }
            else if(sPurpose.equals("Review"))   { aCountPurpose[1]++; }
            else if(sPurpose.equals("Standard")) { aCountPurpose[2]++; }


            // Get list of all templates in use
            if(null == sTemplate || sTemplate.equals("")) { sTemplate = "-"; mRoute.put("from["+ DomainConstants.RELATIONSHIP_INITIATING_ROUTE_TEMPLATE +"].to.name", "-"); }
            if(!lTemplates.contains(sTemplate)) { lTemplates.add(sTemplate); }

        }


        // Add routes that have been completed recently
        StringBuilder sbWhere = new StringBuilder();
        sbWhere.append("(owner == '").append(context.getUser()).append("') && (current == 'Complete')");
        sbWhere.append("&& (modified >= ").append(cRecent.get(Calendar.MONTH)).append("/").append(cRecent.get(Calendar.DAY_OF_MONTH)).append("/").append(cRecent.get(Calendar.YEAR)).append(")");
        MapList mlRoutesRecent = DomainObject.findObjects(context, DomainConstants.TYPE_ROUTE, context.getVault().getName(), sbWhere.toString(), busSelects);

        for(int i = 0; i < mlRoutesRecent.size(); i++) {

            Map mRoute          = (Map)mlRoutesRecent.get(i);
            String sId          = (String)mRoute.get(DomainConstants.SELECT_ID);
            String sName        = (String)mRoute.get(DomainConstants.SELECT_NAME);
            String sHasTask     = (String)mRoute.get("to["+relRouteTask+"]");


            if(sHasTask.equalsIgnoreCase("TRUE")) {

                String sStatus      = (String)mRoute.get("to["+relRouteTask+"].from.current");
                String sDateTarget  = (String)mRoute.get("to["+relRouteTask+"].from.attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE + "]");
                String sDateActual  = (String)mRoute.get("to["+relRouteTask+"].from.attribute["+ DomainConstants.ATTRIBUTE_ACTUAL_COMPLETION_DATE +"]");
                String sTitle       = (String)mRoute.get("to["+relRouteTask+"].from.attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
                String sAction      = (String)mRoute.get("to["+relRouteTask+"].from.attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION+"]");
                String sFirstName   = (String)mRoute.get("to["+relRouteTask+"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.attribute["+ DomainConstants.ATTRIBUTE_FIRST_NAME +"]");
                String sLastName    = (String)mRoute.get("to["+relRouteTask+"].from.from["+ DomainConstants.RELATIONSHIP_PROJECT_TASK + "].to.attribute["+ DomainConstants.ATTRIBUTE_LAST_NAME +"]");

                if(sStatus.contains("")) {

                    sTitle = sTitle.replaceAll("", " ");
                    if(sTitle.startsWith("")) { sTitle = " " + sTitle;}
                    if(sTitle.endsWith("")) { sTitle = sTitle + " ";}

                    sDateTarget = sDateTarget.replaceAll("", " ");
                    if(sDateTarget.startsWith("")) { sDateTarget = " " + sDateTarget;}
                    if(sDateTarget.endsWith("")) { sDateTarget = sDateTarget + " ";}

                    sDateActual = sDateActual.replaceAll("", " ");
                    if(sDateActual.startsWith("")) { sDateActual = " " + sDateActual;}
                    if(sDateActual.endsWith("")) { sDateActual = sDateActual + " ";}

                    sFirstName = sFirstName.replaceAll("", " ");
                    if(sFirstName.startsWith("")) { sFirstName = " " + sFirstName;}
                    if(sFirstName.endsWith("")) { sFirstName = sFirstName + " ";}

                    sLastName = sLastName.replaceAll("", " ");
                    if(sLastName.startsWith("")) { sLastName = " " + sLastName;}
                    if(sLastName.endsWith("")) { sLastName = sLastName + " ";}

                    String[] aStatus        = sStatus.split("");
                    String[] aDateTarget    = sDateTarget.split("");
                    String[] aDateActual    = sDateActual.split("");
                    String[] aTitle         = sTitle.split("");
                    String[] aAction        = sAction.split("");
                    String[] aFirstName     = sFirstName.split("");
                    String[] aLastName      = sLastName.split("");

                    for(int k = 0; k < aStatus.length; k++) {
                        String sParamFirstName = "";
                        String sParamLastName = "";
                        if(k < aFirstName.length) { sParamFirstName = aFirstName[k]; }
                        if(k < aLastName.length) { sParamLastName = aLastName[k]; }
                        addRecentTaskToMap(context, mlTasksRecent, cRecent, sId, sName, aStatus[k], aDateTarget[k], aDateActual[k], aTitle[k], aAction[k], sParamFirstName, sParamLastName,sLanguage);
                    }

                } else {
                    addRecentTaskToMap(context, mlTasksRecent, cRecent, sId, sName, sStatus, sDateTarget, sDateActual, sTitle, sAction, sFirstName, sLastName, sLanguage);
                }

            }
        }



        // Pending Tasks
        mlTasksPending.sort("date", "descending", "date");

        for(int i = 0; i < mlTasksPending.size(); i++) {

            Map mTaskPending            = (Map)mlTasksPending.get(i);
            String sTitle               = (String)mTaskPending.get("title");
            String sDate                = (String)mTaskPending.get("date");
            String sDateLabel           = (String)mTaskPending.get("date");
            String sPerson              = (String)mTaskPending.get("person");
            String sAction              = (String)mTaskPending.get("action");
            String sRoute               = (String)mTaskPending.get("name");
            String sId                  = (String)mTaskPending.get("id");
            String status               = (String)mTaskPending.get("status");
            StringBuilder sbToAppend    = new StringBuilder();

            if(sDateLabel.contains(" ")) { sDateLabel = sDateLabel.substring(0, sDateLabel.indexOf(" ")); }
            if(sTitle.equals("")) { sTitle = "(" + sAction + ")"; }
            else if(sTitle.equals(" ")) { sTitle = "(" + sAction + ")"; }

            if(!"".equals(sDate)) {

                iMaxPending++;

                sbCategoriesPending.append("'").append(sTitle).append("',");
                cDate.setTime(sdf.parse(sDate));

                int iYear   = cDate.get(Calendar.YEAR);
                int iMonth  = cDate.get(Calendar.MONTH);
                int iWeek   = cDate.get(Calendar.WEEK_OF_YEAR);
                int iDay    = cDate.get(Calendar.DAY_OF_MONTH);

                sbToAppend.append("{ id:'").append(sId).append("', title:'").append(sTitle).append("', route:'").append(sRoute).append("', person:'").append(sPerson).append("', action:'").append(sAction).append("',person:'").append(sPerson);
                if ("Complete".equalsIgnoreCase(status)){
                	
        			sbToAppend.append("', status:'").append(statusCompletedDate);
                } else {
       		 		sbToAppend.append("', status:'").append(statusDueDate);
                }
                sbToAppend.append("', date:").append(cDate.getTimeInMillis());
                sbToAppend.append(", x:").append(cDate.getTimeInMillis());
                sbToAppend.append(", y:").append(i).append("},");

                if(cDate.before(cNow))         { sbDataPending1.append(sbToAppend.toString()); aCountPending[2]++; }
                else {
                    if(cDate.after(cFuture))   { sbDataPending3.append(sbToAppend.toString()); }
                    else                       { sbDataPending2.append(sbToAppend.toString()); }

                }

                if(iYear == iYearNow) {
                    if(iWeek == iWeekNow)   { aCountPending[0]++; }
                    if(iMonth == iMonthNow) { aCountPending[1]++;     }
                }

            }

        }

        String sPrefixTasks         = "<a onclick='openURLInDetails(\"../common/emxIndentedTable.jsp?table=APPTaskSummary&freezePane=Name,Title&program=emxDashboardRoutes:getRouteTasksPending&selection=multiple&mode=";
        String sSuffixTasks         = "&suiteKey=Framework&header=";

        sbPendingWeek.append("<span style='font-weight:bold;'>").append(aCountPending[0]).append("</span> ").append(sPrefixTasks).append("week").append(sSuffixTasks).append("emxFramework.String.PendingTasksThisWeek").append("\")'>").append(sLabelThisWeek).append("</a>");
        sbPendingMonth.append("<span style='font-weight:bold;'>").append(aCountPending[1]).append("</span> ").append(sPrefixTasks).append("month").append(sSuffixTasks).append("emxFramework.String.PendingTasksThisMonth").append("\")'>").append(sLabelThisMonth).append("</a>");
        sbPendingOverdue.append("<span style='font-weight:bold;'>").append(aCountPending[2]).append("</span> ").append(sPrefixTasks).append("overdue").append(sSuffixTasks).append("emxFramework.String.PendingTasksOverdue").append("\")'>").append(sLabelOverdue).append("</a>");


        // Recent Tasks
        mlTasksRecent.sort("actual", "descending", "date");

        for(int i = 0; i < mlTasksRecent.size(); i++) {

            Map mTaskRecent             = (Map)mlTasksRecent.get(i);
            String sTitle               = (String)mTaskRecent.get("title");
            String sTarget              = (String)mTaskRecent.get("target");
            String sTargetLabel         = (String)mTaskRecent.get("target");
            String sActual              = (String)mTaskRecent.get("actual");
            String sPerson              = (String)mTaskRecent.get("person");
            String sAction              = (String)mTaskRecent.get("action");
            String sRoute               = (String)mTaskRecent.get("name");
            String sId                  = (String)mTaskRecent.get("id");
            String status               = (String)mTaskRecent.get("status");
            StringBuilder sbToAppend    = new StringBuilder();

            if(sTargetLabel.contains(" ")) { sTargetLabel = sTargetLabel.substring(0, sTargetLabel.indexOf(" ")); }
            if(sTitle.equals("")) { sTitle = "(" + sAction + ")"; }
            else if(sTitle.equals(" ")) { sTitle = "(" + sAction + ")"; }

            if(!"".equals(sActual)) {

                iMaxRecent++;
                sbCategoriesRecent.append("'").append(sTitle).append("',");
                cDate.setTime(sdf.parse(sActual));

                int iYear   = cDate.get(Calendar.YEAR);
                int iMonth  = cDate.get(Calendar.MONTH);
                int iDay    = cDate.get(Calendar.DAY_OF_MONTH);

                sbToAppend.append("{ id:'").append(sId).append("', title:'").append(sTitle).append("', route:'").append(sRoute).append("', person:'").append(sPerson).append("', action:'").append(sAction).append("',person:'").append(sPerson);
                if ("Complete".equalsIgnoreCase(status)){
            			sbToAppend.append("', status:'").append(statusCompletedDate);
                } else {
           		 	sbToAppend.append("', status:'").append(statusDueDate);
                }
                sbToAppend.append("', date:").append(cDate.getTimeInMillis()).append(",").append("  x:").append(cDate.getTimeInMillis()).append(",");
                sbToAppend.append("  y:").append(i).append("},");

                if("".equals(sTarget) || " ".equals(sTarget)) { sbDataRecent2.append(sbToAppend.toString()); }
                else {
                    Calendar cTarget = Calendar.getInstance();
                    cTarget .setTime(sdf.parse(sTarget));
                    int iYearTarget   = cTarget.get(Calendar.YEAR);
                    int iMonthTarget  = cTarget.get(Calendar.MONTH);
                    int iDayTarget    = cTarget.get(Calendar.DAY_OF_MONTH);

                sbDataRecent1.append("{ id:'").append(sId).append("', title:'").append(sTitle).append("', route:'").append(sRoute).append("', person:'").append(sPerson).append("', action:'").append(sAction).append("',person:'").append(sPerson).append("', status:'").append(statusDueDate).append("', date:").append(cTarget.getTimeInMillis()).append(",").append(" x:").append(cTarget.getTimeInMillis()).append(",");
                sbDataRecent1.append("  y:").append(i).append("},");

                    if(cDate.after(cTarget)) {
                        sbDataRecent4.append(sbToAppend.toString());
                    } else {
                        sbDataRecent3.append(sbToAppend.toString());
                    }

                }

            }

        }


        // Route Base Purpose Data
        sbDataPurpose.append("{ color:'#8BBA00', y:").append(aCountPurpose[0]).append(", value:'Approval', name:\"").append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Base_Purpose.Approval", sLanguage)).append("\"},");
        sbDataPurpose.append("{ color:'#329CEE', y:").append(aCountPurpose[1]).append(", value:'Review',   name:\"").append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Base_Purpose.Review", sLanguage)).append("\"},");
        sbDataPurpose.append("{ color:'#F6BD0F', y:").append(aCountPurpose[2]).append(", value:'Standard', name:\"").append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Base_Purpose.Standard", sLanguage)).append("\"}");


        // Types Data
        Collections.sort(lTypes);
        for(int i = 0; i < lTypes.size(); i++) {
            sbCategoriesType.append("\"").append( lTypes.get(i)).append("\",");
        }
        int[] aCountType = new int[lTypes.size()];


       // Templates and Types Data
        Collections.sort(lTemplates);
        for(int i = 0; i < lTemplates.size(); i++) {
            sbCategoriesTemplate.append("'").append( lTemplates.get(i)).append("',");
        }

        int[] aCountTemplate = new int[lTemplates.size()];
        for(int i = 0; i < aCountTemplate.length; i++) { aCountTemplate[i] = 0; }

        for(int i = 0; i < mlRoutes.size(); i++) {

            Map mRoute          = (Map)mlRoutes.get(i);
            String sHasObject   = (String)mRoute.get("to["+ relObjectRoute +"]");
            String sTemplate    = (String)mRoute.get("from["+ DomainConstants.RELATIONSHIP_INITIATING_ROUTE_TEMPLATE +"].to.name");

            aCountTemplate[lTemplates.indexOf(sTemplate)]++;

            if(sHasObject.equalsIgnoreCase("TRUE")) {
                java.util.List<String> lPreviousTypes = new ArrayList<String>();
                if (mRoute.get("to["+ relObjectRoute + "].from.type.kindof") instanceof StringList) {
                    StringList slData = (StringList)mRoute.get("to["+relObjectRoute+"].from.type.kindof");

                    for(int k = 0; k < slData.size(); k++) {
                        String sData = (String)slData.get(k);
                        if(!lPreviousTypes.contains(sData)) {
                            sData = EnoviaResourceBundle.getTypeI18NString(context, sData, sLanguage);
                            aCountType[lTypes.indexOf(sData)]++;
                            lPreviousTypes.add(sData);
                        }
                    }
                } else {
                    String sData = (String)mRoute.get("to["+relObjectRoute+"].from.type.kindof");
                    if(sData.contains("")) {
                        String[] aData = sData.split("");
                        for(int j = 0; j < aData.length; j++) {
                            if(!lPreviousTypes.contains(aData[j])) {
                                String sDataItem = EnoviaResourceBundle.getTypeI18NString(context, aData[j], sLanguage);
                                aCountType[lTypes.indexOf(sDataItem)]++;
                                lPreviousTypes.add(aData[j]);
                            }
                        }
                    } else {
                        sData = EnoviaResourceBundle.getTypeI18NString(context, sData, sLanguage);
                        aCountType[lTypes.indexOf(sData)]++;
                    }
                }
           }

        }
        for(int i = 0; i < aCountTemplate.length; i++) {    sbDataTemplate.append("{ color:'#").append(sColors[i%sColors.length]).append("', y:").append(aCountTemplate[i]).append("},"); }

        for(int i = 0; i < aCountType.length; i++) {
            String sFilter = "";
            for(int j = 0; j < mlTypes.size(); j++) {
                Map mType = (Map)mlTypes.get(j);
                String sTypeLabel = (String)mType.get("label");
                if(sTypeLabel.equals(lTypes.get(i))) {
                    sFilter = (String)mType.get("name");
                    break;
                }
            }

            sbDataType.append("{ filter:'").append(sFilter).append("', color:'#").append(sColors[i%sColors.length]).append("', y:").append(aCountType[i]).append("},");
        }



        // Remove commas
        if (sbCategoriesPending.length() > 0 ) { sbCategoriesPending.setLength(sbCategoriesPending.length() - 1); }
        if (sbDataPending1.length() > 0 ) { sbDataPending1.setLength(sbDataPending1.length() - 1); }
        if (sbDataPending2.length() > 0 ) { sbDataPending2.setLength(sbDataPending2.length() - 1); }
        if (sbDataPending3.length() > 0 ) { sbDataPending3.setLength(sbDataPending3.length() - 1); }
        if (sbCategoriesRecent.length() > 0 ) { sbCategoriesRecent.setLength(sbCategoriesRecent.length() - 1); }
        if (sbDataRecent1.length() > 0 ) { sbDataRecent1.setLength(sbDataRecent1.length() - 1); }
        if (sbDataRecent2.length() > 0 ) { sbDataRecent2.setLength(sbDataRecent2.length() - 1); }
        if (sbDataRecent3.length() > 0 ) { sbDataRecent3.setLength(sbDataRecent3.length() - 1); }
        if (sbDataRecent4.length() > 0 ) { sbDataRecent4.setLength(sbDataRecent4.length() - 1); }
        if (sbDataType.length() > 0 ) { sbDataType.setLength(sbDataType.length() - 1); }
        if (sbCategoriesTemplate.length() > 0 ) { sbCategoriesTemplate.setLength(sbCategoriesTemplate.length() - 1); }
        if (sbDataTemplate.length() > 0 ) { sbDataTemplate.setLength(sbDataTemplate.length() - 1); }


        // Determin charts heights
        int iHeightType 	= 32 + (aCountType.length * 28);
        int iHeightTemplate 	= 32 + (aCountTemplate.length * 28);
        int iHeightRecent	= 78 + (iMaxRecent * 20);

        if(iHeightRecent < 150) { iHeightRecent = 150; }
        int iHeightPending = 40 + (iMaxPending * 17);
        if(iHeightPending < 160) { iHeightPending = 160; }

        // Set return values
        aResults[0]  = sbRoutes.toString();
        aResults[1]  = cNow.get(Calendar.YEAR) + "," + (cNow.get(Calendar.MONTH)) + "," + cNow.get(Calendar.DAY_OF_MONTH);
        aResults[2]  = sbCategoriesPending.toString();
        aResults[3]  = String.valueOf(iMaxPending-1);
        aResults[4]  = sbDataPending1.toString();
        aResults[5]  = sbDataPending2.toString();
        aResults[6]  = sbDataPending3.toString();
        aResults[7]  = String.valueOf(iHeightPending);
        aResults[8] = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.PendingTasks", sLanguage);
        aResults[9]  = sbPendingWeek.toString();
        aResults[10] = sbPendingMonth.toString();
        aResults[11] = sbPendingOverdue.toString();
        aResults[12] = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.RecentUpdates", sLanguage);
        aResults[13] = sbCategoriesRecent.toString();
        aResults[14] = sbDataRecent1.toString();
        aResults[15] = sbDataRecent2.toString();
        aResults[16] = sbDataRecent3.toString();
        aResults[17] = sbDataRecent4.toString();
        aResults[18] = String.valueOf(iHeightRecent);
        aResults[19] = String.valueOf(iMaxRecent-1);
        aResults[20] = sbCategoriesType.toString();
        aResults[21] = sbDataType.toString();
        aResults[22] = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.ContentType", sLanguage);
        aResults[23] = String.valueOf(iHeightType);
        aResults[24] = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.RouteBasePurpose", sLanguage);
        aResults[25] = sbDataPurpose.toString();
        aResults[26] = sbCategoriesTemplate.toString();
        aResults[27] = sbDataTemplate.toString();
        aResults[28] = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.RouteTemplate", sLanguage);
        aResults[29] = String.valueOf(iHeightTemplate);


        return aResults;

    }
    private void addPendingTaskToMap(Context context,MapList mlTasksPending, String sId, String sName, String sStatus, String sDateTarget, String sTitle, String sAction, String sFirstName, String sLastName, String sLanguage) {
        if(!sStatus.equals("Complete")) {

            if(!sDateTarget.equals("")){
            	if(!sDateTarget.equals(" ")) {
            	try{
                Map mPendingTask    = new HashMap();
                String sPerson      = sLastName.toUpperCase() + " " + sFirstName;
	                if("Approve".equals(sAction)){
	                	sAction=EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Action.Approve", sLanguage);
	                }else if("Comment".equals(sAction)){
	                	sAction=EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Action.Comment", sLanguage);	
	                }else if("Notify Only".equals(sAction)){
	                	sAction=EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Action.Notify_Only", sLanguage);	
	                }
                mPendingTask.put("id"       , sId);
                mPendingTask.put("name"     , sName);
                mPendingTask.put("date"     , sDateTarget);
                mPendingTask.put("title"    , sTitle);
                mPendingTask.put("action"   , sAction);
                mPendingTask.put("person"   , sPerson);
                mPendingTask.put("status"   , sStatus);

                mlTasksPending.add(mPendingTask);
            	}catch(Exception e){}
        }

    }
       }
    }
    private void addRecentTaskToMap(Context context, MapList mlTasksRecent, Calendar cRecent, String sId, String sName, String sStatus, String sDateTarget, String sDateActual, String sTitle, String sAction, String sFirstName, String sLastName, String sLanguage) throws ParseException {


        if(!sDateActual.equals(" ")) {
            if(!sDateActual.equals("")) {

                Calendar cDate = Calendar.getInstance();
                cDate.setTime(sdf.parse(sDateActual));

                if(cDate.after(cRecent)) {
                	try{
                    Map mPendingTask    = new HashMap();
                    String sPerson      = sLastName.toUpperCase() + " " + sFirstName;
	                    if("Approve".equals(sAction)){
		                	sAction=EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Action.Approve", sLanguage);
		                }else if("Comment".equals(sAction)){
		                	sAction=EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Action.Comment", sLanguage);
		
		                }else if("Notify Only".equals(sAction)){
		                	sAction=EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Range.Route_Action.Notify_Only", sLanguage);		
		                }

                    mPendingTask.put("id"       , sId);
                    mPendingTask.put("name"     , sName);
                    mPendingTask.put("target"   , sDateTarget);
                    mPendingTask.put("actual"   , sDateActual);
                    mPendingTask.put("title"    , sTitle);
                    mPendingTask.put("action"   , sAction);
                    mPendingTask.put("person"   , sPerson);
                    mPendingTask.put("status"   , sStatus);
                    mlTasksRecent.add(mPendingTask);
                	}catch(Exception e){}
                }
            }
        }

    }
    @com.matrixone.apps.framework.ui.ProgramCallable
    public MapList getRoutesPending(Context context, String[] args) throws FrameworkException, Exception {


        HashMap paramMap        = (HashMap) JPO.unpackArgs(args);
        String sOID             = (String) paramMap.get("objectId");
        String sFilterContent   = (String) paramMap.get("filterContent");
        String sFilterTemplate  = (String) paramMap.get("filterTemplate");
        String sFilterPurpose   = (String) paramMap.get("filterPurpose");
        String relObjectRoute = DomainConstants.RELATIONSHIP_OBJECT_ROUTE;
        String relInitiatingRouteTemplate = DomainConstants.RELATIONSHIP_INITIATING_ROUTE_TEMPLATE;

        StringBuilder sbWhere = new StringBuilder();
        StringList busSelects = new StringList();
        busSelects.add("id");
        busSelects.add("attribute["+DomainObject.ATTRIBUTE_RESTRICT_MEMBERS+"]");

        if(null != sFilterContent) {
            if(sbWhere.length() > 0) { sbWhere.append(" && "); }
            busSelects.add("to["+ relObjectRoute +"]");
            busSelects.add("to["+ relObjectRoute +"].from.type.kindof");
            sbWhere.append("(to["+ relObjectRoute +"] == True)");
            sbWhere.append("&& (to["+ relObjectRoute+"].from.type.kindof == '");
            sbWhere.append(sFilterContent);
            sbWhere.append("')");
        }
        if(null != sFilterPurpose) {
            if(sbWhere.length() > 0) { sbWhere.append(" && "); }
            sbWhere.append("(attribute["+ DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE +"] == '").append(sFilterPurpose).append("')");
        }
        if(null != sFilterTemplate) {
            if(sbWhere.length() > 0) { sbWhere.append(" && "); }
            if(sFilterTemplate.equals("-")) {
                busSelects.add("from["+ relInitiatingRouteTemplate +"]");
                sbWhere.append("(from["+ relInitiatingRouteTemplate +"] == False)");
            } else {
                busSelects.add("from["+ relInitiatingRouteTemplate +"].to.name");
                sbWhere.append("(from["+ relInitiatingRouteTemplate +"].to.name == '");
                sbWhere.append(sFilterTemplate);
                sbWhere.append("')");
            }
        }

        return retrieveRoutesPending(context, args, busSelects, sbWhere.toString());

    }
    public MapList retrieveRoutesPending(Context context, String[] args, StringList busSelects, String sFilter) throws FrameworkException {

        busSelects.add(DomainConstants.SELECT_CURRENT);
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_STATUS +"]");

        String sWhere = "(current == 'In Process') && (attribute[Route Status] == 'Started') && (to["+DomainConstants.RELATIONSHIP_ROUTE_TASK+"].from.from["+DomainConstants.RELATIONSHIP_PROJECT_TASK+"].to.name == \""+context.getUser()+"\")";

        if(!sFilter.equals("")) {
            sWhere += " && " + sFilter;
        }

        return DomainObject.findObjects(context, DomainConstants.TYPE_ROUTE, context.getVault().getName(), sWhere, busSelects);

    }
    @com.matrixone.apps.framework.ui.ProgramCallable
    public MapList getRouteTasksPending(Context context, String[] args) throws FrameworkException, Exception {


        MapList mlResults   = new MapList();
        HashMap paramMap    = (HashMap) JPO.unpackArgs(args);
        String sOID         = (String) paramMap.get("objectId");
        String sMode        = (String) paramMap.get("mode");
        Calendar cNow       = Calendar.getInstance();
        int iYearNow        = cNow.get(Calendar.YEAR);
        int iWeekNow        = cNow.get(Calendar.WEEK_OF_YEAR);
        int iMonthNow       = cNow.get(Calendar.MONTH);
        Long lNow           = cNow.getTimeInMillis();

        java.util.List<String> lIds = new ArrayList<String>();

        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_CURRENT);
        busSelects.add("attribute["+ PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_attribute_CurrentRouteNode) +"]");

        String relRouteTask = DomainConstants.RELATIONSHIP_ROUTE_TASK;
        busSelects.add("to["+ relRouteTask +"]");
        busSelects.add("to["+ relRouteTask +"].from.id");
		busSelects.add("to["+ relRouteTask +"].from.owner");
        busSelects.add("to["+ relRouteTask +"].from.current");
        busSelects.add("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]");

        MapList mlRoutes = retrieveRoutesPending(context, args, busSelects, "");

        for(int i = 0; i < mlRoutes.size(); i++) {

            Map mRoute      = (Map)mlRoutes.get(i);
            String sId      = (String)mRoute.get("to["+ relRouteTask +"].from.id");
			String sTaskOwner = (String)mRoute.get("to["+ relRouteTask +"].from.owner");
            String sStatus  = (String)mRoute.get("to["+ relRouteTask +"].from.current");
            String sTarget  = (String)mRoute.get("to["+ relRouteTask +"].from.attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]");
            // need to remove this condition by proper solution
            if(sStatus.contains("")) {

                String[] aDataId        = sId.split("");
                String[] aDataStatus    = sStatus.split("");
				String[] aDataTaskOwner = sTaskOwner.split("");
                String[] aDataTarget    = new String[aDataStatus.length];

                if(null != sTarget) {
                    sTarget = sTarget.replaceAll("", " ");
                    if(sTarget.startsWith("")) { sTarget = " " + sTarget;}
                    if(sTarget.endsWith("")) { sTarget = sTarget + " ";}
                    aDataTarget = sTarget.split("");
                }

                for(int j = 0; j < aDataStatus.length; j++) {
					if(context.getUser().equals((String)aDataTaskOwner[j]))
                    addPendingTaskByMode(lIds, sMode, iYearNow, iMonthNow, iWeekNow, lNow, aDataId[j], aDataStatus[j], aDataTarget[j]);
                }

            } else {
                addPendingTaskByMode(lIds, sMode, iYearNow, iMonthNow, iWeekNow, lNow, sId, sStatus, sTarget);
            }

        }

        String[] aIds = new String[lIds.size()];
        for(int i = 0; i < aIds.length; i++) { aIds[i] = lIds.get(i); }

        StringList slTask = new StringList();

        slTask.add(DomainConstants.SELECT_ID);
        slTask.add("attribute["+DomainConstants.ATTRIBUTE_TASK_ESTIMATED_FINISH_DATE+"]");

        slTask.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_INSTRUCTIONS+"]");
        slTask.add("attribute["+ DomainConstants.ATTRIBUTE_ACTUAL_COMPLETION_DATE+"]");
        slTask.add(DomainConstants.SELECT_TYPE);
        slTask.add("attribute["+ DomainConstants.ATTRIBUTE_TASK_ACTUAL_FINISH_DATE+"]");

        slTask.add("attribute["+ PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_attribute_DueDate)+"]");
        slTask.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION +"]");
        slTask.add("attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]");
        slTask.add("attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
        slTask.add("from["+ relRouteTask +"].to.id");
        slTask.add("from["+ relRouteTask +"].to.Name");
		slTask.add("from[" + relRouteTask + "].to.to[" + DomainConstants.RELATIONSHIP_ROUTE_SCOPE + "].from.id");
		slTask.add("from[" + relRouteTask + "].to.to[" + DomainConstants.RELATIONSHIP_ROUTE_SCOPE + "].from.name");

        slTask.add(DomainConstants.SELECT_DESCRIPTION);
        slTask.add(DomainConstants.SELECT_CURRENT);

        mlResults = DomainObject.getInfo(context, aIds, slTask);

        return mlResults;

    }
    public void addPendingTaskByMode(java.util.List lIds, String sMode, int iYearNow, int iMonthNow, int iWeekNow, Long lNow, String sId, String sStatus, String sTarget) throws ParseException {

        if(sStatus.equals("Assigned") || sStatus.equals("Review")) {

            if(null != sTarget) { if(!sTarget.equals("")) { if(!sTarget.equals(" ")) {

                Boolean bAdd            = false;
                SimpleDateFormat sdf = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat());
                Calendar cTarget        = Calendar.getInstance();

                cTarget.setTime(sdf.parse(sTarget));

                int iYear   = cTarget.get(Calendar.YEAR);
                int iWeek   = cTarget.get(Calendar.WEEK_OF_YEAR);
                int iMonth  = cTarget.get(Calendar.MONTH);

                if(sMode.equals("week")) {
                    if(iYear == iYearNow) {
                        if(iWeek == iWeekNow) {
                            bAdd = true;
                        }
                    }
                } else if(sMode.equals("month")) {
                    if(iYear == iYearNow) {
                        if(iMonth == iMonthNow) {
                            bAdd = true;
                        }
                    }
                } else if(sMode.equals("overdue")) {
                    Long lTarget = cTarget.getTimeInMillis();
                    if(lTarget < lNow) { bAdd = true; }
                }

                if(bAdd) {
                    lIds.add(sId);
                }

            }}}
        }

    }


    // My Dashboard
    public String[] getUserDashboardData(Context context, String[] args) throws Exception {


        String[] sColors        = {"329cee","f6bd0f","8BBA00","ec0c41","752fc3","AFD8F8","fad46c","c9ff0d","F984A1","A66EDD"};
        String[] aResults       = new String[16];
        HashMap paramMap        = (HashMap) JPO.unpackArgs(args);
        String sOID             = (String)paramMap.get("objectId");
        String sLanguage        = (String)paramMap.get("languageStr");
        Integer[] iCounters     = new Integer[3];
        int iCountTimeline      = 0;
        int iCountMRU           = 0;

        for(int i = 0; i < 3; i++) { iCounters[i] = 0; }

        Calendar cNow   = Calendar.getInstance();
        int iWeekNow 	= cNow.get(Calendar.WEEK_OF_YEAR);
        int iMonthNow 	= cNow.get(Calendar.MONTH);
        int iYearNow 	= cNow.get(Calendar.YEAR);
        Calendar cFuture= Calendar.getInstance();
        cFuture.add(java.util.GregorianCalendar.DAY_OF_YEAR, 5);

        Calendar cMRU= Calendar.getInstance();
        cMRU.add(java.util.GregorianCalendar.DAY_OF_YEAR, -1);

        StringBuilder sbInfo1           = new StringBuilder();
        StringBuilder sbInfo2           = new StringBuilder();
        StringBuilder sbInfo3           = new StringBuilder();
        StringBuilder sbAxisTimeline    = new StringBuilder();
        StringBuilder sbDataTimeline1   = new StringBuilder();
        StringBuilder sbDataTimeline2   = new StringBuilder();
        StringBuilder sbDataTimeline3   = new StringBuilder();

        com.matrixone.apps.common.Person pUser = com.matrixone.apps.common.Person.getPerson( context );

        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_CURRENT);
        busSelects.add(DomainConstants.SELECT_MODIFIED);
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]");
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION +"]");
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
        busSelects.add("from["+ DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.id");
        busSelects.add("from["+ DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.name");
        StringBuilder sbWhere   = new StringBuilder();
        sbWhere.append("(current != 'Complete')");
        sbWhere.append(" && (from[" +  DomainConstants.RELATIONSHIP_ROUTE_TASK  + "].to.attribute[Route Status] != \"Stopped\") ");

        MapList mlInboxTasks = pUser.getRelatedObjects(context, "Project Task", "Inbox Task", busSelects, null, true, false, (short)1, sbWhere.toString(), "", 0);

        mlInboxTasks.sort("attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]", "descending", "date");

        for(int i = 0; i < mlInboxTasks.size(); i++) {

            Map mInboxTask  = (Map)mlInboxTasks.get(i);
            String sDate    = (String)mInboxTask.get("attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]");
            String sTitle   = (String)mInboxTask.get("attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
            String sAction  = (String)mInboxTask.get("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION +"]");
			String actionKey="emxFramework.Range.Route_Action."+sAction;
            String sId      = (String)mInboxTask.get("from["+ DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.id");
            String sRoute   = (String)mInboxTask.get("from["+ DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.name");
            String sModified= (String)mInboxTask.get(DomainConstants.SELECT_MODIFIED);

            Calendar cModified    = Calendar.getInstance();
            cModified.setTime(sdf.parse(sModified));
            if(cModified.after(cMRU)) { iCountMRU++; }

            if(null == sTitle) { sTitle = "(" + sAction + ")"; }
            else if("".equals(sTitle)) { sTitle = "(" + sAction + ")"; }

            if(null != sDate) {
                if(!"".equals(sDate)) {

                    iCountTimeline++;
                    StringBuilder sbToAppend = new StringBuilder();
                    Calendar cTarget    = Calendar.getInstance();
                    cTarget.setTime(sdf.parse(sDate));

                    int iDay 	= cTarget.get(Calendar.DAY_OF_MONTH);
                    int iWeek 	= cTarget.get(Calendar.WEEK_OF_YEAR);
                    int iMonth 	= cTarget.get(Calendar.MONTH);
                    int iYear 	= cTarget.get(Calendar.YEAR);

                    sbAxisTimeline.append("'").append(sTitle).append("',");

                    sbToAppend.append("{ id:'").append(sId).append("', title:'").append(sTitle).append("', route:'").append(sRoute).append("', action:'").append(EnoviaResourceBundle.getProperty(context, "Framework", actionKey , sLanguage)).append("', date:").append(cTarget.getTimeInMillis()).append(", y:").append(iCountTimeline).append(",");
                    sbToAppend.append(" x:").append(cTarget.getTimeInMillis()).append("},");

                    if(cTarget.before(cNow)) { iCounters[0]++; sbDataTimeline1.append(sbToAppend.toString()); }
                    else {
                        if(cTarget.before(cFuture)) { sbDataTimeline2.append(sbToAppend.toString()); }
                        else { sbDataTimeline3.append(sbToAppend.toString()); }
                    }
                    if(iYear == iYearNow) {
                        if(iMonth == iMonthNow) { iCounters[1]++; }
                        if(iWeek == iWeekNow) { iCounters[2]++; }
                    }



                }
            }

        }

        if(sbAxisTimeline.length() > 0) { sbAxisTimeline.setLength(sbAxisTimeline.length() - 1); }
        if(sbDataTimeline1.length() > 0) { sbDataTimeline1.setLength(sbDataTimeline1.length() - 1); }
        if(sbDataTimeline2.length() > 0) { sbDataTimeline2.setLength(sbDataTimeline2.length() - 1); }
        if(sbDataTimeline3.length() > 0) { sbDataTimeline3.setLength(sbDataTimeline3.length() - 1); }


        // Info Links
        String sInfoPrefix 	= " <a onclick='openURLInDetails(\"../common/emxIndentedTable.jsp?suiteKey=Framework&table=APPTaskSummary&freezePane=Name,NewWindow&editLink=true&selection=multiple&sortColumnName=DueDate&sortDirection=ascending&program=emxDashboardRoutes:";
        sbInfo1.append("<b>").append(iCounters[0]).append("</b>").append(sInfoPrefix).append("getRouteTasksAssignedPending&mode=Overdue&header=emxFramework.String.RouteTasksOverdue\")'>").append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.Overdue" , sLanguage)).append("</a>");
        sbInfo2.append("<b>").append(iCounters[1]).append("</b>").append(sInfoPrefix).append("getRouteTasksAssignedPending&mode=Month&header=emxFramework.String.RouteTasksDueThisMonth\")'>").append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.ThisMonth" , sLanguage)).append("</a>");
        sbInfo3.append("<b>").append(iCounters[2]).append("</b>").append(sInfoPrefix).append("getRouteTasksAssignedPending&mode=Week&header=emxFramework.String.RouteTasksDueThisWeek\")'>").append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.ThisWeek" , sLanguage)).append("</a>");


        // Dashboard Counters
        StringBuilder sbCounter = new StringBuilder();
        sbCounter.append("<td onclick='openURLInDetails(\"../common/emxIndentedTable.jsp?table=APPTaskSummary&program=emxDashboardRoutes:getRouteTasksAssignedPending&header=emxFramework.String.AssignedTasksPending&freezePane=Name,NewWindow&suiteKey=Framework&selection=multiple\")' ");
        sbCounter.append(" class='counterCell ");
        if(mlInboxTasks.size() == 0){ sbCounter.append("grayBright");   }
        else                        { sbCounter.append("purple");       }
        sbCounter.append("'><span class='counterText ");
        if(mlInboxTasks.size() == 0){ sbCounter.append("grayBright");   }
        else                        { sbCounter.append("purple");       }
        sbCounter.append("'>").append(mlInboxTasks.size()).append("</span><br/>");
        sbCounter.append(EnoviaResourceBundle.getProperty(context, "Components", "emxComponents.Common.AssignedTasks", sLanguage)).append("</td>");

        StringBuilder sbUpdates = new StringBuilder();
        sbUpdates.append("<td ");
        if(iCountMRU > 0) {
            sbUpdates.append(" onclick='openURLInDetails(\"../common/emxIndentedTable.jsp?table=APPTaskSummary&program=emxDashboardRoutes:getRouteTasksAssignedPending&mode=MRU&header=emxFramework.String.MRURouteTasks&freezePane=Name,NewWindow&suiteKey=Framework\")' ");
            sbUpdates.append(" class='mruCell'><span style='color:#000000;font-weight:bold;'>").append(iCountMRU).append("</span> <span class='counterTextMRU'>");
            if(iCountMRU == 1) { sbUpdates.append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.MostRecentUpdate"  , sLanguage)); }
            else               { sbUpdates.append(EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.MostRecentUpdates" , sLanguage)); }
            sbUpdates.append("</span>");
        } else {
            sbUpdates.append(">");
        }
        sbUpdates.append("</td>");


        int iHeight = 40 + (iCountTimeline*17);
        if(iHeight < 160) { iHeight = 160; }

        aResults[0]  = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.String.AssignedTasksPending", sLanguage);
        aResults[1]  = sbInfo1.toString();
        aResults[2]  = sbInfo2.toString();
        aResults[3]  = sbInfo3.toString();
        aResults[4]  = sbAxisTimeline.toString();
        aResults[5]  = sbDataTimeline1.toString();
        aResults[6]  = sbDataTimeline2.toString();
        aResults[7]  = sbDataTimeline3.toString();
        aResults[8]  = String.valueOf(iCountTimeline);
        aResults[9]  = String.valueOf(iHeight);
        aResults[10] = sbCounter.toString();
        aResults[11] = sbUpdates.toString();
        aResults[12] = EnoviaResourceBundle.getProperty(context, "Framework", "emxFramework.Type.Route",  sLanguage);
        aResults[13] = EnoviaResourceBundle.getProperty(context, "Components", "emxComponents.Widget.Tasks",  sLanguage);
        aResults[14] = EnoviaResourceBundle.getProperty(context, "Components", "emxComponents.TaskDetails.Action",  sLanguage);
        aResults[15] =EnoviaResourceBundle.getProperty(context, "Components", "emxComponents.Routes.ScheduleCompDate",  sLanguage);
        return aResults;

    }
    @com.matrixone.apps.framework.ui.ProgramCallable
    public MapList getRouteTasksAssignedPending(Context context, String[] args) throws Exception {


        Map programMap          = (Map) JPO.unpackArgs(args);
        String sMode            = (String) programMap.get("mode");
        StringBuilder sbWhere   = new StringBuilder();

        if(null == sMode) { sMode = ""; }
        com.matrixone.apps.common.Person pUser = com.matrixone.apps.common.Person.getPerson( context );

        String attrScheduledCompletionDate = DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE;
        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_TYPE);
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE +"]");
        busSelects.add("from["+DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.id");
        busSelects.add("from["+DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.name");        
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_TITLE +"]");
        busSelects.add(DomainConstants.SELECT_CURRENT);
        busSelects.add("attribute["+ DomainConstants.ATTRIBUTE_ROUTE_ACTION +"]");
		busSelects.add("from[" + relRouteTask + "].to.to[" + DomainConstants.RELATIONSHIP_ROUTE_SCOPE + "].from.id");
        busSelects.add("from[" + relRouteTask + "].to.to[" + DomainConstants.RELATIONSHIP_ROUTE_SCOPE + "].from.name");

        sbWhere.append("(current != 'Complete')");
        sbWhere.append(" && (from[" +  DomainConstants.RELATIONSHIP_ROUTE_TASK  + "].to.attribute[Route Status] != \"Stopped\") ");
        if(sMode.equals("MRU")) {

            Calendar cal = Calendar.getInstance();
            cal.add(java.util.GregorianCalendar.DAY_OF_YEAR, -1);

            String sMinute = String.valueOf(cal.get(Calendar.MINUTE));
            String sSecond = String.valueOf(cal.get(Calendar.SECOND));
            String sAMPM = (cal.get(Calendar.AM_PM) == 0 ) ? "AM" : "PM";

            if(sSecond.length() == 1) { sSecond = "0" + sSecond; }
            if(sMinute.length() == 1) { sMinute = "0" + sMinute; }

            StringBuilder sbDate = new StringBuilder();
            sbDate.append(cal.get(Calendar.MONTH) + 1).append("/").append(cal.get(Calendar.DAY_OF_MONTH)).append("/").append(cal.get(Calendar.YEAR));
            sbDate.append(" ").append(cal.get(Calendar.HOUR) + 1).append(":").append(sMinute).append(":").append(sSecond).append(" ").append(sAMPM);

            sbWhere.append(" && (modified >= \"");
            sbWhere.append(sdf.format(new java.util.Date(sbDate.toString())));
            sbWhere.append("\")");

        } else if(sMode.equals("Week")) {

            Calendar cStart = Calendar.getInstance();
            Calendar cEnd = Calendar.getInstance();

            cStart.set(Calendar.DAY_OF_WEEK, cStart.getFirstDayOfWeek());
            cEnd.set(Calendar.DAY_OF_WEEK, cEnd.getFirstDayOfWeek());
            cEnd.add(java.util.GregorianCalendar.DAY_OF_YEAR, +7);

            sbWhere.append(" && ");
            sbWhere.append("(attribute["+ attrScheduledCompletionDate +"] >= '").append(cStart.get(Calendar.MONTH) + 1).append("/").append(cStart.get(Calendar.DAY_OF_MONTH)).append("/").append(cStart.get(Calendar.YEAR)).append("')");
            sbWhere.append(" && ");
            sbWhere.append("(attribute["+ attrScheduledCompletionDate +"] < '").append(cEnd.get(Calendar.MONTH) + 1).append("/").append(cEnd.get(Calendar.DAY_OF_MONTH)).append("/").append(cEnd.get(Calendar.YEAR)).append("')");

        } else if(sMode.equals("Month")) {

            Calendar cStart = Calendar.getInstance();
            Calendar cEnd = Calendar.getInstance();

            cEnd.add(java.util.GregorianCalendar.MONTH, +1);

            sbWhere.append(" && ");
            sbWhere.append("(attribute["+ attrScheduledCompletionDate +"] >= '").append(cStart.get(Calendar.MONTH) + 1).append("/1/").append(cStart.get(Calendar.YEAR)).append("')");
            sbWhere.append(" && ");
            sbWhere.append("(attribute["+ attrScheduledCompletionDate +"] < '").append(cEnd.get(Calendar.MONTH) + 1).append("/1/").append(cEnd.get(Calendar.YEAR)).append("')");

        } else if(sMode.equals("Overdue")) {

            Calendar cal = Calendar.getInstance();
            cal.add(java.util.GregorianCalendar.DAY_OF_YEAR, -1);
            
            String sMinute = String.valueOf(cal.get(Calendar.MINUTE));
            String sSecond = String.valueOf(cal.get(Calendar.SECOND));
            String sAMPM = (cal.get(Calendar.AM_PM) == 0 ) ? "AM" : "PM";

            if(sSecond.length() == 1) { sSecond = "0" + sSecond; }
            if(sMinute.length() == 1) { sMinute = "0" + sMinute; }

			StringBuilder sbDate = new StringBuilder();            
            sbDate.append(cal.get(Calendar.MONTH) + 1).append("/").append(cal.get(Calendar.DAY_OF_MONTH)+1).append("/").append(cal.get(Calendar.YEAR));
            sbDate.append(" ").append(cal.get(Calendar.HOUR)).append(":").append(sMinute).append(":").append(sSecond).append(" ").append(sAMPM);          
            
            sbWhere.append(" && ");
            sbWhere.append("(attribute["+ attrScheduledCompletionDate +"] <= '");
            sbWhere.append(sdf.format(new java.util.Date(sbDate.toString())));
            sbWhere.append("')");

        }

        return pUser.getRelatedObjects(context, DomainConstants.RELATIONSHIP_PROJECT_TASK , DomainConstants.TYPE_INBOX_TASK, busSelects, null, true, false, (short)1, sbWhere.toString(), "", 0);

    }


    // Route creation by trigger
    // Approval routes for documents
    public int triggerCreateRoute(Context context, String[] args) throws Exception {


        String sOID             = args[0];
        String sRouteTemplate   = args[1];
        String sState           = args[2];
        String sRestart         = args[3];
        DomainObject dObject    = new DomainObject(sOID);
        Policy policy           = dObject.getPolicy(context);
        String sSymbolicPolicy  = FrameworkUtil.getAliasForAdmin(context, "Policy", policy.getName(), true);
        String sSymbolicState   = FrameworkUtil.reverseLookupStateName(context, policy.getName(), sState);
        Boolean bStartNewRoute  = true;

        if(null == sRestart) { sRestart = "TRUE"; }
        else if("".equals(sRestart)) { sRestart = "TRUE"; }

        if(sRestart.equalsIgnoreCase("TRUE")) {

            StringList busSelects = new StringList();
            StringList relSelects = new StringList();
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_ID);
            relSelects.add("attribute["+DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE+"]");

            StringBuilder sbWhere = new StringBuilder();
            sbWhere.append("(from["+ DomainConstants.RELATIONSHIP_INITIATING_ROUTE_TEMPLATE +"].to.name == '").append(sRouteTemplate).append("')");
            sbWhere.append("&& (attribute["+ DomainConstants.ATTRIBUTE_ROUTE_STATUS +"] == 'Stopped')");
            sbWhere.append("&& (current != 'Complete') && (current != 'Archive')");

            MapList mlStateBlocks = dObject.getRelatedObjects(context, DomainConstants.RELATIONSHIP_OBJECT_ROUTE, DomainConstants.TYPE_ROUTE, busSelects, relSelects, false, true, (short)1, sbWhere.toString(), "attribute["+DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE+"] == '" + sSymbolicState + "'", 0);

            if(mlStateBlocks.size() > 0) {
                bStartNewRoute = false;
                for(int i = 0; i < mlStateBlocks.size(); i++) {
                    Map mRoute = (Map)mlStateBlocks.get(i);
                    Route route = new Route((String)mRoute.get("id"));
                    route.resume(context);
                }
            }

        }

        if(bStartNewRoute) {

            StringList busSelects = new StringList();
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_ID);
            busSelects.add(DomainConstants.SELECT_REVISION);
            busSelects.add(DomainConstants.SELECT_DESCRIPTION);

            MapList mlRouteTemplates = DomainObject.findObjects(context, DomainConstants.TYPE_ROUTE_TEMPLATE, context.getVault().getName(), "name == '" + sRouteTemplate + "'", busSelects);

            if (mlRouteTemplates.size() > 0) {

                // Get route template details
                mlRouteTemplates.sort("revision", "descending", "String");
                Map mRouteTemplate          = (Map) mlRouteTemplates.get(0);
                String sOIDRouteTemplate    = (String) mRouteTemplate.get(DomainConstants.SELECT_ID);
                String sDescriptionTemplate = (String) mRouteTemplate.get(DomainConstants.SELECT_DESCRIPTION);

                // Create new route
                String sName = DomainObject.getAutoGeneratedName(context, "type_Route", "");
                Route newRoute = new Route();
                newRoute.createObject(context, DomainConstants.TYPE_ROUTE, sName, "1", DomainConstants.POLICY_ROUTE, context.getVault().getName());
                newRoute.setDescription(context, sDescriptionTemplate);

                String attrRouteCompletionAction = PropertyUtil.getSchemaProperty(context,DomainSymbolicConstants.SYMBOLIC_attribute_RouteCompletionAction);

                newRoute.setAttributeValue(context, attrRouteCompletionAction, "Promote Connected Object");
                newRoute.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE, "Approval");
                newRoute.connectTemplate(context, sOIDRouteTemplate);
                newRoute.addMembersFromTemplate(context, sOIDRouteTemplate);

                DomainRelationship dRel = newRoute.addRelatedObject(context, new RelationshipType(DomainConstants.RELATIONSHIP_OBJECT_ROUTE), true, sOID);
                StateList stateList = dObject.getStates(context);

                if(stateList.size() > 1) {
                    ContextUtil.pushContext(context);
                    dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_BASE_POLICY, sSymbolicPolicy);
                    dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE, sSymbolicState);
                    dRel.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE, "Approval");
                    ContextUtil.popContext(context);
                }

                try {
                    startRoute(context, newRoute.getObjectId(context));
                } catch (Exception e) {}

            }

        }

        return 0;

    }
    public void startRoute(Context context, String strRouteId) throws Exception {

        String OFFSET_FROM_ROUTE_START_DATE = "Route Start Date";
        String OFFSET_FROM_TASK_CREATE_DATE = "Task Create Date";

        String selDueDateOffset = "attribute[" + DomainConstants.ATTRIBUTE_DUEDATE_OFFSET + "]";
        String selDueDateOffsetFrom = "attribute[" + DomainConstants.ATTRIBUTE_DATE_OFFSET_FROM + "]";
        String selSequence = "attribute[" + DomainConstants.ATTRIBUTE_ROUTE_SEQUENCE + "]";
        String selRouteNodeRelId = DomainConstants.SELECT_RELATIONSHIP_ID;

        StringList relSelects = new StringList(4);
        relSelects.addElement(selDueDateOffset);
        relSelects.addElement(selDueDateOffsetFrom);
        relSelects.addElement(selRouteNodeRelId);
        relSelects.addElement(selSequence);

        StringBuffer sWhereExp = new StringBuffer();

        DomainObject doRoute = new DomainObject(strRouteId);

        // where clause filters to all route tasks with due offset from this Route Start
        sWhereExp.append("(" + selDueDateOffset + " !~~ \"\")");
        sWhereExp.append(" && (" + selDueDateOffsetFrom + " ~~ \"" + OFFSET_FROM_ROUTE_START_DATE + "\")");

        MapList routeStartOffsetList = doRoute.getRelatedObjects(context,
                Route.RELATIONSHIP_ROUTE_NODE, //String relPattern
                "*", //String typePattern
                null, //StringList objectSelects,
                relSelects, //StringList relationshipSelects,
                false, //boolean getTo,
                true, //boolean getFrom,
                (short) 1, //short recurseToLevel,
                "", //String objectWhere,
                sWhereExp.toString(), //String relationshipWhere,
                null, //Pattern includeType,
                null, //Pattern includeRelationship,
                null);                       //Map includeMap


        // set Scheduled Due Date attribute for all delta offset Route Nodes
        setDueDatesFromOffset(context, routeStartOffsetList);

        sWhereExp.setLength(0);

        // where clause filters to First order tasks offset from their creation (i.e. this route start)
        sWhereExp.setLength(0);
        sWhereExp.append("(" + selDueDateOffset + " !~~ \"\")");
        sWhereExp.append(" && (" + selDueDateOffsetFrom + " ~~ \"" + OFFSET_FROM_TASK_CREATE_DATE + "\")");
        sWhereExp.append(" && (" + selSequence + " == \"1\")");

        MapList routeFirstOrderOffsetList = doRoute.getRelatedObjects(context,
                Route.RELATIONSHIP_ROUTE_NODE, //String relPattern
                "*", //String typePattern
                null, //StringList objectSelects,
                relSelects, //StringList relationshipSelects,
                false, //boolean getTo,
                true, //boolean getFrom,
                (short) 1, //short recurseToLevel,
                "", //String objectWhere,
                sWhereExp.toString(), //String relationshipWhere,
                null, //Pattern includeType,
                null, //Pattern includeRelationship,
                null);                       //Map includeMap
        // set Scheduled Due Date attribute for all delta offset ORDER 1 Route Nodes offset From Task create which is same as Route start

        setDueDatesFromOffset(context, routeFirstOrderOffsetList);

        doRoute.promote(context);


    }
    public void setDueDatesFromOffset(Context context, MapList offsetList) throws Exception {

        String selDueDateOffset = "attribute[" + DomainConstants.ATTRIBUTE_DUEDATE_OFFSET + "]";

        Map rNodeMap = null;
        DomainRelationship relObjRouteNode = null;
        Attribute scheduledDateAttribute = null;
        AttributeList timeAttrList = new AttributeList();
        GregorianCalendar cal = new GregorianCalendar();
        GregorianCalendar offSetCal = new GregorianCalendar();
        SimpleDateFormat formatterTest = new SimpleDateFormat(eMatrixDateFormat.getInputDateFormat(), Locale.US);

        Iterator nextOrderOffsetItr = offsetList.iterator();

        // get the equivalent server time with required timezone

        cal.setTime(new Date(cal.getTime().getTime())); //modified on 8th March
        String routeTaskScheduledDateStr = null;
        String rNodeId = null;
        String duedateOffset = null;

        try {
            ContextUtil.pushContext(context);
            while (nextOrderOffsetItr.hasNext()) {
                // use separate calendar objects and reset offSetCal to master calendar to ensure
                // all delta tasks are offset from same Route Start Time.
                offSetCal = (GregorianCalendar) cal.clone();
                rNodeMap = (Map) nextOrderOffsetItr.next();
                rNodeId = (String) rNodeMap.get(DomainObject.SELECT_RELATIONSHIP_ID);

                duedateOffset = (String) rNodeMap.get(selDueDateOffset);
                // construct corresponding RouteNode relationships and now set correct due-date
                // by adding delta offset to Current time (Route Start) time
                relObjRouteNode = new DomainRelationship(rNodeId);

                offSetCal.add(Calendar.DATE, Integer.parseInt(duedateOffset));
                routeTaskScheduledDateStr = formatterTest.format(offSetCal.getTime());
                scheduledDateAttribute = new Attribute(new AttributeType(DomainConstants.ATTRIBUTE_SCHEDULED_COMPLETION_DATE), routeTaskScheduledDateStr);
                timeAttrList.add(scheduledDateAttribute);




                // set Scheduled Completion date attribute
                relObjRouteNode.setAttributes(context, timeAttrList);
            }
        } catch (Exception ex) {
            throw ex;
        } finally {
            ContextUtil.popContext(context);
        }
    }
    
    public MapList getMyPendingRoutes(Context context, String[] args)throws Exception
    {
        try
        {
        	 MapList totalResultList = new MapList();
        	 String selParentRouteOwner = "to["+DomainConstants.RELATIONSHIP_TASK_SUBROUTE+"].from.from["+DomainConstants.RELATIONSHIP_ROUTE_TASK+"].to.owner";
        	 String attRouteVisibility = "attribute["+DomainObject.ATTRIBUTE_SUBROUTE_VISIBILITY+          "]";
        	 String attRestrictMembers = "attribute["+DomainObject.ATTRIBUTE_RESTRICT_MEMBERS+          "]";
        	 StringList typeSelects = new StringList(4);
             typeSelects.add(DomainObject.SELECT_ID);
             typeSelects.add(selParentRouteOwner.toString());
             typeSelects.add(attRouteVisibility.toString());
             typeSelects.add(attRestrictMembers.toString());
             String sWhere = "(to["+DomainConstants.RELATIONSHIP_ROUTE_TASK+"].from.from["+DomainConstants.RELATIONSHIP_PROJECT_TASK+"].to.name == \""+context.getUser() +"\") && (current == 'In Process') && (attribute[Route Status] == 'Started')";
             totalResultList = (MapList)DomainObject.findObjects(context, DomainConstants.TYPE_ROUTE, context.getVault().getName(), sWhere, typeSelects);
        	 return totalResultList;
        } catch (Exception ex)
        {
            throw ex;
        }
    }

	
}
